import "./chunk-WUGOIBXZ.js";
import {
  writable
} from "./chunk-FYBPVGFD.js";
import {
  getContext,
  onMount,
  setContext
} from "./chunk-IGKPKIRH.js";
import {
  action,
  add_snippet_symbol,
  append_styles,
  attr,
  attr_effect,
  bind_this,
  child,
  child_frag,
  class_name,
  class_name_effect,
  close,
  close_frag,
  component,
  each_indexed,
  each_keyed,
  element,
  event,
  get,
  html,
  if_block,
  mutate_store,
  onDestroy,
  open,
  open_frag,
  pop,
  pre_effect,
  prop,
  prop_source,
  push,
  render_effect,
  sanitize_slots,
  set,
  sibling,
  slot,
  source,
  spread_attributes,
  spread_dynamic_element_attributes,
  spread_props,
  store_get,
  stringify,
  template,
  text,
  unsubscribe_on_destroy,
  untrack,
  unwrap,
  validate_component,
  validate_dynamic_component,
  validate_dynamic_element_tag,
  validate_each_keys,
  validate_store,
  validate_void_dynamic_element
} from "./chunk-7TSOLIEW.js";
import "./chunk-PLGELRID.js";
import "./chunk-IN4DBBVG.js";
import "./chunk-LXJVWPTW.js";
import "./chunk-OL7BDVYM.js";

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/helpers.js
function filterAttrs(attrs = {}, prefix, isEvent) {
  const result = {};
  for (const attr2 in attrs) {
    if (!attrs[attr2])
      continue;
    if (isEvent && !attr2.startsWith(prefix))
      continue;
    const eventName = isEvent ? attr2.replace(prefix, "") : attr2;
    result[eventName] = attrs[attr2];
  }
  return result;
}
function setAttrs(node, attrs = {}) {
  const attrKeys = Object.keys(attrs);
  const setup = (attr2) => node.addEventListener(attr2, attrs[attr2]);
  const teardown = (attr2) => node.removeEventListener(attr2, attrs[attr2]);
  attrKeys.forEach(setup);
  return {
    update(attrs2 = {}) {
      const attrKeys2 = Object.keys(attrs2);
      attrKeys2.forEach(teardown);
      attrKeys2.forEach(setup);
    },
    destroy() {
      attrKeys.forEach(teardown);
    }
  };
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/button/button.svelte
var frag_1 = template(`<a> </a>`);
var frag_2 = template(`<button> </button>`);
var frag = template(`<!>`, true);
function Button($$anchor, $$props) {
  if (new.target === Button)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let attributes = prop_source($$props, "attributes", void 0, false);
  let text2 = prop_source($$props, "text", void 0, false);
  let link = prop_source($$props, "link", void 0, false);
  let openLinkInNewTab = prop_source($$props, "openLinkInNewTab", void 0, false);
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  var fragment = open_frag($$anchor, true, frag);
  var node_1 = child_frag(fragment);
  if_block(
    node_1,
    () => get(link),
    ($$anchor2) => {
      var a = open($$anchor2, true, frag_1);
      let spread_attributes2;
      var text_1 = child(a);
      render_effect(() => {
        spread_attributes2 = spread_attributes(
          a,
          spread_attributes2,
          [
            { role: "button" },
            filterAttrs(get(attributes), "on:", false),
            { href: get(link) },
            {
              target: get(openLinkInNewTab) ? "_blank" : void 0
            }
          ],
          "svelte-164dyn4"
        );
        text(text_1, get(text2));
      });
      action(a, ($$node, $$props2) => setAttrs($$node, $$props2), () => filterAttrs(get(attributes), "on:", true));
      close($$anchor2, a);
    },
    ($$anchor2) => {
      var button = open($$anchor2, true, frag_2);
      let spread_attributes_1;
      var text_2 = child(button);
      render_effect(() => {
        spread_attributes_1 = spread_attributes(
          button,
          spread_attributes_1,
          [
            filterAttrs(get(attributes), "on:", false),
            {
              class: get(attributes).class + " button"
            }
          ],
          "svelte-164dyn4"
        );
        text(text_2, get(text2));
      });
      action(button, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => get(attributes).style);
      action(button, ($$node, $$props2) => setAttrs($$node, $$props2), () => filterAttrs(get(attributes), "on:", true));
      close($$anchor2, button);
    }
  );
  close_frag($$anchor, fragment);
  pop();
  append_styles($$anchor, "svelte-164dyn4", "\n  .button.svelte-164dyn4 {\n    all: unset;\n  }\n");
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/fast-clone.js
var fastClone = (obj) => JSON.parse(JSON.stringify(obj));

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/constants/device-sizes.js
var SIZES = {
  small: {
    min: 320,
    default: 321,
    max: 640
  },
  medium: {
    min: 641,
    default: 642,
    max: 991
  },
  large: {
    min: 990,
    default: 991,
    max: 1200
  }
};
var getMaxWidthQueryForSize = (size, sizeValues = SIZES) => `@media (max-width: ${sizeValues[size].max}px)`;
var getSizesForBreakpoints = ({ small, medium }) => {
  const newSizes = fastClone(SIZES);
  if (!small || !medium) {
    return newSizes;
  }
  const smallMin = Math.floor(small / 2);
  newSizes.small = {
    max: small,
    min: smallMin,
    default: smallMin + 1
  };
  const mediumMin = newSizes.small.max + 1;
  newSizes.medium = {
    max: medium,
    min: mediumMin,
    default: mediumMin + 1
  };
  const largeMin = newSizes.medium.max + 1;
  newSizes.large = {
    max: 2e3,
    // TODO: decide upper limit
    min: largeMin,
    default: largeMin + 1
  };
  return newSizes;
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/constants/target.js
var TARGET = "svelte";

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/logger.js
var MSG_PREFIX = "[Builder.io]: ";
var logger = {
  log: (...message) => console.log(MSG_PREFIX, ...message),
  error: (...message) => console.error(MSG_PREFIX, ...message),
  warn: (...message) => console.warn(MSG_PREFIX, ...message),
  debug: (...message) => console.debug(MSG_PREFIX, ...message)
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/is-browser.js
function isBrowser() {
  return typeof window !== "undefined" && typeof document !== "undefined";
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/is-iframe.js
function isIframe() {
  return isBrowser() && window.self !== window.top;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/is-editing.js
function isEditing() {
  return isIframe() && (TARGET === "reactNative" || window.location.search.indexOf("builder.frameEditing=") !== -1);
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/track/helpers.js
var getLocation = () => {
  if (TARGET === "reactNative") {
    return null;
  } else if (isBrowser()) {
    const parsedLocation = new URL(location.href);
    if (parsedLocation.pathname === "") {
      parsedLocation.pathname = "/";
    }
    return parsedLocation;
  } else {
    console.warn("Cannot get location for tracking in non-browser environment");
    return null;
  }
};
var getUserAgent = () => typeof navigator === "object" && navigator.userAgent || "";
var getUserAttributes = () => {
  const userAgent = getUserAgent();
  const isMobile = {
    Android() {
      return userAgent.match(/Android/i);
    },
    BlackBerry() {
      return userAgent.match(/BlackBerry/i);
    },
    iOS() {
      return userAgent.match(/iPhone|iPod/i);
    },
    Opera() {
      return userAgent.match(/Opera Mini/i);
    },
    Windows() {
      return userAgent.match(/IEMobile/i) || userAgent.match(/WPDesktop/i);
    },
    any() {
      return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows() || TARGET === "reactNative";
    }
  };
  const isTablet = userAgent.match(/Tablet|iPad/i);
  const url = getLocation();
  return {
    urlPath: url == null ? void 0 : url.pathname,
    host: (url == null ? void 0 : url.host) || (url == null ? void 0 : url.hostname),
    device: isTablet ? "tablet" : isMobile.any() ? "mobile" : "desktop"
  };
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/evaluate/helpers.js
var getFunctionArguments = ({ builder, context, event: event2, state }) => {
  return Object.entries({
    state,
    Builder: builder,
    // legacy
    builder,
    context,
    event: event2
  });
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/evaluate/browser-runtime/browser.js
var runInBrowser = ({ code, builder, context, event: event2, localState, rootSetState, rootState }) => {
  const functionArgs = getFunctionArguments({
    builder,
    context,
    event: event2,
    state: flattenState(rootState, localState, rootSetState)
  });
  return new Function(...functionArgs.map(([name]) => name), code)(...functionArgs.map(([, value]) => value));
};
function flattenState(rootState, localState, rootSetState) {
  if (rootState === localState) {
    throw new Error("rootState === localState");
  }
  return new Proxy(rootState, {
    get: (_, prop2) => {
      if (localState && prop2 in localState) {
        return localState[prop2];
      }
      return rootState[prop2];
    },
    set: (_, prop2, value) => {
      if (localState && prop2 in localState) {
        throw new Error("Writing to local state is not allowed as it is read-only.");
      }
      rootState[prop2] = value;
      rootSetState == null ? void 0 : rootSetState(rootState);
      return true;
    }
  });
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/evaluate/evaluate.js
function evaluate({ code, context, localState, rootState, rootSetState, event: event2, isExpression = true }) {
  if (code === "") {
    logger.warn("Skipping evaluation of empty code block.");
    return;
  }
  const builder = {
    isEditing: isEditing(),
    isBrowser: isBrowser(),
    isServer: !isBrowser(),
    getUserAttributes: () => getUserAttributes()
  };
  const useReturn = (
    // we disable this for cases where we definitely don't want a return
    isExpression && !(code.includes(";") || code.includes(" return ") || code.trim().startsWith("return "))
  );
  const useCode = useReturn ? `return (${code});` : code;
  const args = {
    code: useCode,
    builder,
    context,
    event: event2,
    rootSetState,
    rootState,
    localState
  };
  try {
    return runInBrowser(args);
  } catch (e) {
    logger.error("Failed code evaluation: " + e.message, {
      code
    });
    return void 0;
  }
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/set.js
var set2 = (obj, _path, value) => {
  if (Object(obj) !== obj) {
    return obj;
  }
  const path = Array.isArray(_path) ? _path : _path.toString().match(/[^.[\]]+/g);
  path.slice(0, -1).reduce((a, c, i) => Object(a[c]) === a[c] ? a[c] : a[c] = Math.abs(Number(path[i + 1])) >> 0 === +path[i + 1] ? [] : {}, obj)[path[path.length - 1]] = value;
  return obj;
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/transform-block.js
function transformBlock(block) {
  return block;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-processed-block.js
var evaluateBindings = ({ block, context, localState, rootState, rootSetState }) => {
  if (!block.bindings) {
    return block;
  }
  const copy = fastClone(block);
  const copied = {
    ...copy,
    properties: {
      ...copy.properties
    },
    actions: {
      ...copy.actions
    }
  };
  for (const binding in block.bindings) {
    const expression = block.bindings[binding];
    const value = evaluate({
      code: expression,
      localState,
      rootState,
      rootSetState,
      context
    });
    set2(copied, binding, value);
  }
  return copied;
};
function getProcessedBlock({ block, context, shouldEvaluateBindings, localState, rootState, rootSetState }) {
  const transformedBlock = transformBlock(block);
  if (shouldEvaluateBindings) {
    return evaluateBindings({
      block: transformedBlock,
      localState,
      rootState,
      rootSetState,
      context
    });
  } else {
    return transformedBlock;
  }
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/camel-to-kebab-case.js
var camelToKebabCase = (string) => string.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase();

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/nullable.js
var checkIsDefined = (maybeT) => maybeT !== null && maybeT !== void 0;

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/css.js
var convertStyleMapToCSSArray = (style) => {
  const cssProps = Object.entries(style).map(([key3, value]) => {
    if (typeof value === "string") {
      return `${camelToKebabCase(key3)}: ${value};`;
    } else {
      return void 0;
    }
  });
  return cssProps.filter(checkIsDefined);
};
var convertStyleMapToCSS = (style) => convertStyleMapToCSSArray(style).join("\n");
var createCssClass = ({ mediaQuery, className, styles }) => {
  const cssClass = `.${className} {
    ${convertStyleMapToCSS(styles)}
  }`;
  if (mediaQuery) {
    return `${mediaQuery} {
      ${cssClass}
    }`;
  } else {
    return cssClass;
  }
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/inlined-styles.svelte
var frag2 = template(`<!>`, true);
function Inlined_styles($$anchor, $$props) {
  if (new.target === Inlined_styles)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let styles = prop($$props, "styles");
  let id = prop_source($$props, "id", void 0, false);
  var fragment = open_frag($$anchor, true, frag2);
  var node = child_frag(fragment);
  html(node, () => `<${"style"}  id=${get(id)}  >${styles()}<${"/style"}>`, false);
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/components/block-styles.svelte
var frag_12 = template(`<!>`, true);
var frag3 = template(`<!>`, true);
function Block_styles($$anchor, $$props) {
  if (new.target === Block_styles)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const canShowBlock = source();
  const css = source();
  let block = prop($$props, "block");
  let context = prop($$props, "context");
  pre_effect(() => {
    block(), context();
    untrack(() => {
      set(canShowBlock, () => {
        const processedBlock = getProcessedBlock({
          block: block(),
          localState: context().localState,
          rootState: context().rootState,
          rootSetState: context().rootSetState,
          context: context().context,
          shouldEvaluateBindings: true
        });
        if (checkIsDefined(processedBlock.hide)) {
          return !processedBlock.hide;
        }
        if (checkIsDefined(processedBlock.show)) {
          return processedBlock.show;
        }
        return true;
      });
    });
  });
  pre_effect(() => {
    block(), context();
    untrack(() => {
      set(css, () => {
        var _a;
        const processedBlock = getProcessedBlock({
          block: block(),
          localState: context().localState,
          rootState: context().rootState,
          rootSetState: context().rootSetState,
          context: context().context,
          shouldEvaluateBindings: true
        });
        const styles = processedBlock.responsiveStyles;
        const content = context().content;
        const sizesWithUpdatedBreakpoints = getSizesForBreakpoints(((_a = content == null ? void 0 : content.meta) == null ? void 0 : _a.breakpoints) || {});
        const largeStyles = styles == null ? void 0 : styles.large;
        const mediumStyles = styles == null ? void 0 : styles.medium;
        const smallStyles = styles == null ? void 0 : styles.small;
        const className = processedBlock.id;
        if (!className) {
          return "";
        }
        const largeStylesClass = largeStyles ? createCssClass({ className, styles: largeStyles }) : "";
        const mediumStylesClass = mediumStyles ? createCssClass({
          className,
          styles: mediumStyles,
          mediaQuery: getMaxWidthQueryForSize("medium", sizesWithUpdatedBreakpoints)
        }) : "";
        const smallStylesClass = smallStyles ? createCssClass({
          className,
          styles: smallStyles,
          mediaQuery: getMaxWidthQueryForSize("small", sizesWithUpdatedBreakpoints)
        }) : "";
        return [largeStylesClass, mediumStylesClass, smallStylesClass].join(" ");
      });
    });
  });
  var fragment = open_frag($$anchor, true, frag3);
  var node = child_frag(fragment);
  if_block(
    node,
    () => TARGET !== "reactNative" && get(css)() && get(canShowBlock)(),
    ($$anchor2) => {
      var fragment_1 = open_frag($$anchor2, true, frag_12);
      var node_1 = child_frag(fragment_1);
      validate_component(Inlined_styles)(node_1, {
        get styles() {
          return get(css)();
        }
      });
      close_frag($$anchor2, fragment_1);
    },
    null
  );
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-block-component-options.js
function getBlockComponentOptions(block) {
  var _a;
  return {
    ...(_a = block.component) == null ? void 0 : _a.options,
    ...block.options,
    /**
     * Our built-in components frequently make use of the block, so we provide all of it under `builderBlock`
     */
    builderBlock: block
  };
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/sanitize-react-native-block-styles.js
var propertiesThatMustBeNumber = /* @__PURE__ */ new Set(["lineHeight"]);
var displayValues = /* @__PURE__ */ new Set(["flex", "none"]);
var SHOW_WARNINGS = false;
var normalizeNumber = (value) => {
  if (Number.isNaN(value)) {
    return void 0;
  } else if (value < 0) {
    return 0;
  } else {
    return value;
  }
};
var sanitizeReactNativeBlockStyles = (styles) => {
  return Object.keys(styles).reduce((acc, key3) => {
    const propertyValue = styles[key3];
    if (key3 === "display" && !displayValues.has(propertyValue)) {
      if (SHOW_WARNINGS) {
        console.warn(`Style value for key "display" must be "flex" or "none" but had ${propertyValue}`);
      }
      return acc;
    }
    if (propertiesThatMustBeNumber.has(key3) && typeof propertyValue !== "number") {
      if (SHOW_WARNINGS) {
        console.warn(`Style key ${key3} must be a number, but had value \`${styles[key3]}\``);
      }
      return acc;
    }
    if (typeof propertyValue === "string") {
      const isPixelUnit = propertyValue.match(/^-?(\d*)(\.?)(\d*)*px$/);
      if (isPixelUnit) {
        const newValue = parseFloat(propertyValue);
        const normalizedValue = normalizeNumber(newValue);
        if (normalizedValue) {
          return {
            ...acc,
            [key3]: normalizedValue
          };
        } else {
          return acc;
        }
      } else if (propertyValue === "0") {
        return {
          ...acc,
          [key3]: 0
        };
      }
    }
    return {
      ...acc,
      [key3]: propertyValue
    };
  }, {});
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-react-native-block-styles.js
function getReactNativeBlockStyles({ block, context, blockStyles }) {
  const responsiveStyles = block.responsiveStyles;
  if (!responsiveStyles) {
    return {};
  }
  const styles = {
    // recursively apply inherited styles so that they can be passed down to children `Text` blocks
    ...context.inheritedStyles,
    ...responsiveStyles.large || {},
    ...responsiveStyles.medium || {},
    ...responsiveStyles.small || {},
    ...blockStyles
  };
  const newStyles = sanitizeReactNativeBlockStyles(styles);
  return newStyles;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/transform-block-properties.js
function transformBlockProperties(properties) {
  return properties;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-block-properties.js
var extractRelevantRootBlockProperties = (block) => {
  return {
    href: block.href
  };
};
function getBlockProperties({ block, context }) {
  var _a;
  const properties = {
    ...extractRelevantRootBlockProperties(block),
    ...block.properties,
    "builder-id": block.id,
    style: block.style ? getStyleAttribute(block.style) : void 0,
    class: [block.id, "builder-block", block.class, (_a = block.properties) == null ? void 0 : _a.class].filter(Boolean).join(" ")
  };
  if (TARGET === "reactNative") {
    properties.style = getReactNativeBlockStyles({
      block,
      context,
      blockStyles: properties.style
    });
  }
  return transformBlockProperties(properties);
}
function getStyleAttribute(style) {
  switch (TARGET) {
    case "svelte":
    case "vue2":
    case "vue3":
    case "solid":
      return convertStyleMapToCSSArray(style).join(" ");
    case "qwik":
    case "reactNative":
    case "react":
    case "rsc":
      return style;
  }
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/block.helpers.js
var EMPTY_HTML_ELEMENTS = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"];
var isEmptyHtmlElement = (tagName) => {
  return typeof tagName === "string" && EMPTY_HTML_ELEMENTS.includes(tagName.toLowerCase());
};
var getComponent = ({ block, context, registeredComponents }) => {
  var _a;
  const componentName = (_a = getProcessedBlock({
    block,
    localState: context.localState,
    rootState: context.rootState,
    rootSetState: context.rootSetState,
    context: context.context,
    shouldEvaluateBindings: false
  }).component) == null ? void 0 : _a.name;
  if (!componentName) {
    return null;
  }
  const ref = registeredComponents[componentName];
  if (!ref) {
    console.warn(`
      Could not find a registered component named "${componentName}". 
      If you registered it, is the file that registered it imported by the file that needs to render it?`);
    return void 0;
  } else {
    return ref;
  }
};
var getRepeatItemData = ({ block, context }) => {
  const { repeat, ...blockWithoutRepeat } = block;
  if (!(repeat == null ? void 0 : repeat.collection)) {
    return void 0;
  }
  const itemsArray = evaluate({
    code: repeat.collection,
    localState: context.localState,
    rootState: context.rootState,
    rootSetState: context.rootSetState,
    context: context.context
  });
  if (!Array.isArray(itemsArray)) {
    return void 0;
  }
  const collectionName = repeat.collection.split(".").pop();
  const itemNameToUse = repeat.itemName || (collectionName ? collectionName + "Item" : "item");
  const repeatArray = itemsArray.map((item, index2) => ({
    context: {
      ...context,
      localState: {
        ...context.localState,
        $index: index2,
        $item: item,
        [itemNameToUse]: item,
        [`$${itemNameToUse}Index`]: index2
      }
    },
    block: blockWithoutRepeat
  }));
  return repeatArray;
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/context/builder.context.js
var key = Symbol();
var builder_context_default = {
  Builder: writable({
    content: null,
    context: {},
    localState: void 0,
    rootSetState() {
    },
    rootState: {},
    apiKey: null,
    apiVersion: void 0,
    componentInfos: {},
    inheritedStyles: {}
  }),
  key
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/components/repeated-block.svelte
var frag4 = template(`<!>`, true);
function Repeated_block($$anchor, $$props) {
  if (new.target === Repeated_block)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let repeatContext = prop($$props, "repeatContext");
  let block = prop($$props, "block");
  let registeredComponents = prop($$props, "registeredComponents");
  let store = writable(repeatContext());
  setContext(builder_context_default.key, store);
  var fragment = open_frag($$anchor, true, frag4);
  var node = child_frag(fragment);
  validate_component(Block)(node, {
    get block() {
      return block();
    },
    context: store,
    get registeredComponents() {
      return registeredComponents();
    }
  });
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/event-handler-name.js
var getEventHandlerName = (key3) => `on:${key3.toLowerCase()}`;

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-block-actions-handler.js
var createEventHandler = (value, options) => (event2) => evaluate({
  code: value,
  context: options.context,
  localState: options.localState,
  rootState: options.rootState,
  rootSetState: options.rootSetState,
  event: event2,
  isExpression: false
});

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-block-actions.js
function getBlockActions(options) {
  const obj = {};
  const optionActions = options.block.actions ?? {};
  for (const key3 in optionActions) {
    if (!optionActions.hasOwnProperty(key3)) {
      continue;
    }
    const value = optionActions[key3];
    let eventHandlerName = getEventHandlerName(key3);
    if (options.stripPrefix) {
      switch (TARGET) {
        case "vue2":
        case "vue3":
          eventHandlerName = eventHandlerName.replace("v-on:", "");
          break;
        case "svelte":
          eventHandlerName = eventHandlerName.replace("on:", "");
          break;
      }
    }
    obj[eventHandlerName] = createEventHandler(value, options);
  }
  return obj;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/components/interactive-element.svelte
var svelte_component_default = template(`<!>`, true);
var frag5 = template(`<!>`, true);
function Interactive_element($$anchor, $$props) {
  if (new.target === Interactive_element)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $context = () => (validate_store(context(), "context"), store_get(context(), "$context", $$subscriptions));
  let Wrapper = prop($$props, "Wrapper");
  let wrapperProps = prop($$props, "wrapperProps");
  let block = prop($$props, "block");
  let context = prop($$props, "context");
  var fragment = open_frag($$anchor, true, frag5);
  var node = child_frag(fragment);
  component(node, () => Wrapper(), ($$component) => {
    validate_dynamic_component(() => {
      validate_component($$component)(node, spread_props(() => [
        wrapperProps(),
        {
          get attributes() {
            return {
              ...getBlockProperties({ block: block(), context: $context() }),
              ...getBlockActions({
                block: block(),
                rootState: $context().rootState,
                rootSetState: $context().rootSetState,
                localState: $context().localState,
                context: $context().context
              })
            };
          },
          children: add_snippet_symbol(($$anchor2, $$slotProps) => {
            var fragment_1 = open_frag($$anchor2, true, svelte_component_default);
            var node_1 = child_frag(fragment_1);
            slot(node_1, unwrap($$props).children, {}, null);
            close_frag($$anchor2, fragment_1);
          })
        }
      ]));
    });
  });
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/components/component-ref/component-ref.helpers.js
var getWrapperProps = ({ componentOptions, builderBlock, context, componentRef, includeBlockProps, isInteractive, contextValue }) => {
  const interactiveElementProps = {
    Wrapper: componentRef,
    block: builderBlock,
    context,
    wrapperProps: componentOptions
  };
  return isInteractive ? interactiveElementProps : {
    ...componentOptions,
    /**
     * If `noWrap` is set to `true`, then the block's props/attributes are provided to the
     * component itself directly. Otherwise, they are provided to the wrapper element.
     */
    ...includeBlockProps ? {
      attributes: getBlockProperties({
        block: builderBlock,
        context: contextValue
      })
    } : {}
  };
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/components/component-ref/component-ref.svelte
var each_block = template(`<!>`, true);
var each_block_1 = template(`<!>`, true);
var svelte_component_default2 = template(`<!> <!>`, true);
var frag_13 = template(`<!>`, true);
var frag6 = template(`<!>`, true);
function Component_ref($$anchor, $$props) {
  if (new.target === Component_ref)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $context = () => (validate_store(context(), "context"), store_get(context(), "$context", $$subscriptions));
  let isInteractive = prop($$props, "isInteractive");
  let componentRef = prop($$props, "componentRef");
  let componentOptions = prop($$props, "componentOptions");
  let builderBlock = prop($$props, "builderBlock");
  let context = prop($$props, "context");
  let includeBlockProps = prop($$props, "includeBlockProps");
  let blockChildren = prop($$props, "blockChildren");
  let registeredComponents = prop($$props, "registeredComponents");
  let Wrapper = isInteractive() ? Interactive_element : componentRef();
  var fragment = open_frag($$anchor, true, frag6);
  var node = child_frag(fragment);
  if_block(
    node,
    () => componentRef(),
    ($$anchor2) => {
      var fragment_1 = open_frag($$anchor2, true, frag_13);
      var node_1 = child_frag(fragment_1);
      component(node_1, () => Wrapper, ($$component) => {
        validate_dynamic_component(() => {
          validate_component($$component)(node_1, spread_props(() => [
            getWrapperProps({
              componentOptions: componentOptions(),
              builderBlock: builderBlock(),
              context: context(),
              componentRef: componentRef(),
              includeBlockProps: includeBlockProps(),
              isInteractive: isInteractive(),
              contextValue: $context()
            }),
            {
              children: add_snippet_symbol(($$anchor3, $$slotProps) => {
                var fragment_2 = open_frag($$anchor3, true, svelte_component_default2);
                var node_2 = child_frag(fragment_2);
                validate_each_keys(() => blockChildren(), (child2) => {
                  return "block-" + unwrap(child2).id;
                });
                var node_4 = sibling(sibling(node_2));
                validate_each_keys(() => blockChildren(), (child2) => {
                  return "block-style-" + unwrap(child2).id;
                });
                each_keyed(
                  node_2,
                  () => blockChildren(),
                  5,
                  (child2) => {
                    return "block-" + unwrap(child2).id;
                  },
                  ($$anchor4, child2, $$index) => {
                    var fragment_3 = open_frag($$anchor4, true, each_block);
                    var node_3 = child_frag(fragment_3);
                    validate_component(Block)(node_3, {
                      get block() {
                        return unwrap(child2);
                      },
                      get context() {
                        return context();
                      },
                      get registeredComponents() {
                        return registeredComponents();
                      }
                    });
                    close_frag($$anchor4, fragment_3);
                  },
                  null
                );
                each_keyed(
                  node_4,
                  () => blockChildren(),
                  5,
                  (child2) => {
                    return "block-style-" + unwrap(child2).id;
                  },
                  ($$anchor4, child2, $$index_1) => {
                    var fragment_4 = open_frag($$anchor4, true, each_block_1);
                    var node_5 = child_frag(fragment_4);
                    validate_component(Block_styles)(node_5, {
                      get block() {
                        return unwrap(child2);
                      },
                      get context() {
                        return $context();
                      }
                    });
                    close_frag($$anchor4, fragment_4);
                  },
                  null
                );
                close_frag($$anchor3, fragment_2);
              })
            }
          ]));
        });
      });
      close_frag($$anchor2, fragment_1);
    },
    null
  );
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/components/block-wrapper.svelte
var dynamic_element = template(`<!>`, true);
var frag_14 = template(`<!>`, true);
var frag_22 = template(`<!>`, true);
var frag7 = template(`<!>`, true);
function Block_wrapper($$anchor, $$props) {
  if (new.target === Block_wrapper)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $context = () => (validate_store(context(), "context"), store_get(context(), "$context", $$subscriptions));
  let Wrapper = prop($$props, "Wrapper");
  let block = prop($$props, "block");
  let context = prop($$props, "context");
  let hasChildren = prop($$props, "hasChildren");
  var fragment = open_frag($$anchor, true, frag7);
  var node = child_frag(fragment);
  if_block(
    node,
    () => hasChildren(),
    ($$anchor2) => {
      var fragment_1 = open_frag($$anchor2, true, frag_14);
      var node_1 = child_frag(fragment_1);
      validate_void_dynamic_element(() => Wrapper());
      validate_dynamic_element_tag(() => Wrapper());
      element(node_1, () => Wrapper(), ($$element, $$anchor3) => {
        let spread_attributes2;
        render_effect(() => {
          spread_attributes2 = spread_dynamic_element_attributes($$element, spread_attributes2, [getBlockProperties({ block: block(), context: $context() })], "");
        });
        action($$element, ($$node, $$props2) => setAttrs($$node, $$props2), () => getBlockActions({
          block: block(),
          rootState: $context().rootState,
          rootSetState: $context().rootSetState,
          localState: $context().localState,
          context: $context().context,
          stripPrefix: true
        }));
        var fragment_2 = open_frag($$anchor3, true, dynamic_element);
        var node_2 = child_frag(fragment_2);
        slot(node_2, unwrap($$props).children, {}, null);
        close_frag($$anchor3, fragment_2);
      });
      close_frag($$anchor2, fragment_1);
    },
    ($$anchor2) => {
      var fragment_3 = open_frag($$anchor2, true, frag_22);
      var node_3 = child_frag(fragment_3);
      validate_dynamic_element_tag(() => Wrapper());
      element(node_3, () => Wrapper(), ($$element_1, $$anchor3) => {
        let spread_attributes_1;
        render_effect(() => {
          spread_attributes_1 = spread_dynamic_element_attributes($$element_1, spread_attributes_1, [getBlockProperties({ block: block(), context: $context() })], "");
        });
        action($$element_1, ($$node, $$props2) => setAttrs($$node, $$props2), () => getBlockActions({
          block: block(),
          rootState: $context().rootState,
          rootSetState: $context().rootSetState,
          localState: $context().localState,
          context: $context().context,
          stripPrefix: true
        }));
      });
      close_frag($$anchor2, fragment_3);
    }
  );
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/block/block.svelte
var frag_3 = template(`<!>`, true);
var each_block2 = template(`<!>`, true);
var frag_4 = template(`<!>`, true);
var each_block_12 = template(`<!>`, true);
var each_block_2 = template(`<!>`, true);
var BlockWrapper_default = template(`<!> <!> <!>`, true);
var frag_5 = template(`<!>`, true);
var frag_23 = template(`<!> <!> <!>`, true);
var frag_6 = template(`<!>`, true);
var frag_15 = template(`<!>`, true);
var frag8 = template(`<!>`, true);
function Block($$anchor, $$props) {
  if (new.target === Block)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $context = () => (validate_store(context(), "context"), store_get(context(), "$context", $$subscriptions));
  const $childrenContext = () => (validate_store(childrenContext, "childrenContext"), store_get(childrenContext, "$childrenContext", $$subscriptions));
  const blockComponent = source();
  const repeatItem = source();
  const processedBlock = source();
  const Tag = source();
  const canShowBlock = source();
  const childrenWithoutParentComponent = source();
  const componentRefProps = source();
  let block = prop($$props, "block");
  let context = prop($$props, "context");
  let registeredComponents = prop($$props, "registeredComponents");
  let childrenContext = writable($context());
  pre_effect(() => {
    block(), $context(), registeredComponents();
    untrack(() => {
      set(blockComponent, () => {
        return getComponent({
          block: block(),
          context: $context(),
          registeredComponents: registeredComponents()
        });
      });
    });
  });
  pre_effect(() => {
    block(), $context();
    untrack(() => {
      set(repeatItem, () => {
        return getRepeatItemData({ block: block(), context: $context() });
      });
    });
  });
  pre_effect(() => {
    get(repeatItem), block(), $context();
    untrack(() => {
      set(processedBlock, () => {
        return get(repeatItem)() ? block() : getProcessedBlock({
          block: block(),
          localState: $context().localState,
          rootState: $context().rootState,
          rootSetState: $context().rootSetState,
          context: $context().context,
          shouldEvaluateBindings: true
        });
      });
    });
  });
  pre_effect(() => {
    block();
    untrack(() => {
      set(Tag, () => {
        return block().tagName || "div";
      });
    });
  });
  pre_effect(() => {
    get(processedBlock);
    untrack(() => {
      set(canShowBlock, () => {
        if ("hide" in get(processedBlock)()) {
          return !get(processedBlock)().hide;
        }
        if ("show" in get(processedBlock)()) {
          return get(processedBlock)().show;
        }
        return true;
      });
    });
  });
  pre_effect(() => {
    get(blockComponent), get(repeatItem), get(processedBlock);
    untrack(() => {
      set(childrenWithoutParentComponent, () => {
        var _a, _b;
        const shouldRenderChildrenOutsideRef = !((_b = (_a = get(blockComponent)) == null ? void 0 : _a()) == null ? void 0 : _b.component) && !get(repeatItem)();
        return shouldRenderChildrenOutsideRef ? get(processedBlock)().children ?? [] : [];
      });
    });
  });
  pre_effect(() => {
    get(processedBlock), get(blockComponent), context(), registeredComponents();
    untrack(() => {
      set(componentRefProps, () => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
        return {
          blockChildren: get(processedBlock)().children ?? [],
          componentRef: (_b = (_a = get(blockComponent)) == null ? void 0 : _a()) == null ? void 0 : _b.component,
          componentOptions: {
            ...getBlockComponentOptions(get(processedBlock)()),
            builderContext: context(),
            ...((_d = (_c = get(blockComponent)) == null ? void 0 : _c()) == null ? void 0 : _d.name) === "Symbol" || ((_f = (_e = get(blockComponent)) == null ? void 0 : _e()) == null ? void 0 : _f.name) === "Columns" ? {
              builderComponents: registeredComponents()
            } : {}
          },
          context: childrenContext,
          registeredComponents: registeredComponents(),
          builderBlock: get(processedBlock)(),
          includeBlockProps: ((_h = (_g = get(blockComponent)) == null ? void 0 : _g()) == null ? void 0 : _h.noWrap) === true,
          isInteractive: !((_j = (_i = get(blockComponent)) == null ? void 0 : _i()) == null ? void 0 : _j.isRSC)
        };
      });
    });
  });
  var fragment = open_frag($$anchor, true, frag8);
  var node = child_frag(fragment);
  if_block(
    node,
    () => get(canShowBlock)(),
    ($$anchor2) => {
      var fragment_1 = open_frag($$anchor2, true, frag_15);
      var node_1 = child_frag(fragment_1);
      if_block(
        node_1,
        () => {
          var _a, _b;
          return !((_b = (_a = get(blockComponent)) == null ? void 0 : _a()) == null ? void 0 : _b.noWrap);
        },
        ($$anchor3) => {
          var fragment_2 = open_frag($$anchor3, true, frag_23);
          var node_2 = child_frag(fragment_2);
          var node_4 = sibling(sibling(node_2));
          var node_7 = sibling(sibling(node_4));
          if_block(
            node_2,
            () => isEmptyHtmlElement(get(Tag)()),
            ($$anchor4) => {
              var fragment_3 = open_frag($$anchor4, true, frag_3);
              var node_3 = child_frag(fragment_3);
              validate_component(Block_wrapper)(node_3, {
                get Wrapper() {
                  return get(Tag)();
                },
                get block() {
                  return get(processedBlock)();
                },
                get context() {
                  return context();
                },
                hasChildren: false
              });
              close_frag($$anchor4, fragment_3);
            },
            null
          );
          if_block(
            node_4,
            () => !isEmptyHtmlElement(get(Tag)()) && get(repeatItem)(),
            ($$anchor4) => {
              var fragment_4 = open_frag($$anchor4, true, frag_4);
              var node_5 = child_frag(fragment_4);
              validate_each_keys(() => get(repeatItem)(), (data) => {
                return get(index);
              });
              each_indexed(
                node_5,
                () => get(repeatItem)(),
                1,
                ($$anchor5, data, index2) => {
                  var fragment_5 = open_frag($$anchor5, true, each_block2);
                  var node_6 = child_frag(fragment_5);
                  validate_component(Repeated_block)(node_6, {
                    get repeatContext() {
                      return unwrap(data).context;
                    },
                    get block() {
                      return unwrap(data).block;
                    },
                    get registeredComponents() {
                      return registeredComponents();
                    }
                  });
                  close_frag($$anchor5, fragment_5);
                },
                null
              );
              close_frag($$anchor4, fragment_4);
            },
            null
          );
          if_block(
            node_7,
            () => !isEmptyHtmlElement(get(Tag)()) && !get(repeatItem)(),
            ($$anchor4) => {
              var fragment_6 = open_frag($$anchor4, true, frag_5);
              var node_8 = child_frag(fragment_6);
              validate_component(Block_wrapper)(node_8, {
                get Wrapper() {
                  return get(Tag)();
                },
                get block() {
                  return get(processedBlock)();
                },
                get context() {
                  return context();
                },
                hasChildren: true,
                children: add_snippet_symbol(($$anchor5, $$slotProps) => {
                  var fragment_7 = open_frag($$anchor5, true, BlockWrapper_default);
                  var node_9 = child_frag(fragment_7);
                  var node_10 = sibling(sibling(node_9));
                  validate_each_keys(() => get(childrenWithoutParentComponent)(), (child2) => {
                    return "block-" + unwrap(child2).id;
                  });
                  var node_12 = sibling(sibling(node_10));
                  validate_each_keys(() => get(childrenWithoutParentComponent)(), (child2) => {
                    return "block-style-" + unwrap(child2).id;
                  });
                  validate_component(Component_ref)(node_9, spread_props(() => [get(componentRefProps)()]));
                  each_keyed(
                    node_10,
                    () => get(childrenWithoutParentComponent)(),
                    5,
                    (child2) => {
                      return "block-" + unwrap(child2).id;
                    },
                    ($$anchor6, child2, $$index_1) => {
                      var fragment_8 = open_frag($$anchor6, true, each_block_12);
                      var node_11 = child_frag(fragment_8);
                      validate_component(Block)(node_11, {
                        get block() {
                          return unwrap(child2);
                        },
                        context: childrenContext,
                        get registeredComponents() {
                          return registeredComponents();
                        }
                      });
                      close_frag($$anchor6, fragment_8);
                    },
                    null
                  );
                  each_keyed(
                    node_12,
                    () => get(childrenWithoutParentComponent)(),
                    5,
                    (child2) => {
                      return "block-style-" + unwrap(child2).id;
                    },
                    ($$anchor6, child2, $$index_2) => {
                      var fragment_9 = open_frag($$anchor6, true, each_block_2);
                      var node_13 = child_frag(fragment_9);
                      validate_component(Block_styles)(node_13, {
                        get block() {
                          return unwrap(child2);
                        },
                        get context() {
                          return $childrenContext();
                        }
                      });
                      close_frag($$anchor6, fragment_9);
                    },
                    null
                  );
                  close_frag($$anchor5, fragment_7);
                })
              });
              close_frag($$anchor4, fragment_6);
            },
            null
          );
          close_frag($$anchor3, fragment_2);
        },
        ($$anchor3) => {
          var fragment_10 = open_frag($$anchor3, true, frag_6);
          var node_14 = child_frag(fragment_10);
          validate_component(Component_ref)(node_14, spread_props(() => [get(componentRefProps)()]));
          close_frag($$anchor3, fragment_10);
        }
      );
      close_frag($$anchor2, fragment_1);
    },
    null
  );
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/blocks/blocks-wrapper.svelte
var frag9 = template(`<div><!></div>`);
function Blocks_wrapper($$anchor, $$props) {
  if (new.target === Blocks_wrapper)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const className = source();
  let blocks = prop($$props, "blocks");
  let parent2 = prop($$props, "parent");
  let path = prop($$props, "path");
  let styleProp = prop($$props, "styleProp");
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  function onClick() {
    var _a, _b;
    if (isEditing() && !((_a = blocks()) == null ? void 0 : _a.length)) {
      (_b = window.parent) == null ? void 0 : _b.postMessage(
        {
          type: "builder.clickEmptyBlocks",
          data: {
            parentElementId: parent2(),
            dataPath: path()
          }
        },
        "*"
      );
    }
  }
  function onMouseEnter() {
    var _a, _b;
    if (isEditing() && !((_a = blocks()) == null ? void 0 : _a.length)) {
      (_b = window.parent) == null ? void 0 : _b.postMessage(
        {
          type: "builder.hoverEmptyBlocks",
          data: {
            parentElementId: parent2(),
            dataPath: path()
          }
        },
        "*"
      );
    }
  }
  pre_effect(() => {
    blocks();
    untrack(() => {
      set(className, () => {
        var _a;
        return "builder-blocks" + (!((_a = blocks()) == null ? void 0 : _a.length) ? " no-blocks" : "");
      });
    });
  });
  var div = open($$anchor, true, frag9);
  let spread_attributes2;
  var node_1 = child(div);
  slot(node_1, unwrap($$props).children, {}, null);
  render_effect(() => {
    spread_attributes2 = spread_attributes(
      div,
      spread_attributes2,
      [
        { class: get(className)() + " div" },
        { "builder-path": path() },
        { "builder-parent-id": parent2() },
        {}
      ],
      "svelte-jzu5nw"
    );
  });
  action(div, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => styleProp());
  event(
    "click",
    div,
    (event2) => {
      onClick();
    },
    false
  );
  event(
    "mouseenter",
    div,
    (event2) => {
      onMouseEnter();
    },
    false
  );
  event(
    "keypress",
    div,
    (event2) => {
      onClick();
    },
    false
  );
  close($$anchor, div);
  pop();
  append_styles($$anchor, "svelte-jzu5nw", "\n  .div.svelte-jzu5nw {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n  }\n");
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/context/components.context.js
var key2 = Symbol();
var components_context_default = {
  Components: { registeredComponents: {} },
  key: key2
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/blocks/blocks.svelte
var each_block3 = template(`<!>`, true);
var frag_16 = template(`<!>`, true);
var each_block_13 = template(`<!>`, true);
var frag_24 = template(`<!>`, true);
var BlocksWrapper_default = template(`<!> <!>`, true);
var frag10 = template(`<!>`, true);
function Blocks($$anchor, $$props) {
  if (new.target === Blocks)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $context = () => (validate_store(get(context), "context"), store_get(get(context), "$context", $$subscriptions));
  const $builderContext = () => (validate_store(builderContext, "builderContext"), store_get(builderContext, "$builderContext", $$subscriptions));
  let blocks = prop($$props, "blocks");
  let parent2 = prop($$props, "parent");
  let path = prop($$props, "path");
  let styleProp = prop($$props, "styleProp");
  let context = prop_source($$props, "context", void 0, false);
  let registeredComponents = prop_source($$props, "registeredComponents", void 0, false);
  let builderContext = getContext(builder_context_default.key);
  let componentsContext = getContext(components_context_default.key);
  var fragment = open_frag($$anchor, true, frag10);
  var node = child_frag(fragment);
  validate_component(Blocks_wrapper)(node, {
    get blocks() {
      return blocks();
    },
    get parent() {
      return parent2();
    },
    get path() {
      return path();
    },
    get styleProp() {
      return styleProp();
    },
    children: add_snippet_symbol(($$anchor2, $$slotProps) => {
      var fragment_1 = open_frag($$anchor2, true, BlocksWrapper_default);
      var node_1 = child_frag(fragment_1);
      var node_4 = sibling(sibling(node_1));
      if_block(
        node_1,
        () => blocks(),
        ($$anchor3) => {
          var fragment_2 = open_frag($$anchor3, true, frag_16);
          var node_2 = child_frag(fragment_2);
          validate_each_keys(() => blocks(), (block) => {
            return "render-block-" + unwrap(block).id;
          });
          each_keyed(
            node_2,
            () => blocks(),
            5,
            (block) => {
              return "render-block-" + unwrap(block).id;
            },
            ($$anchor4, block, $$index) => {
              var fragment_3 = open_frag($$anchor4, true, each_block3);
              var node_3 = child_frag(fragment_3);
              validate_component(Block)(node_3, {
                get block() {
                  return unwrap(block);
                },
                get context() {
                  return get(context) || builderContext;
                },
                get registeredComponents() {
                  return get(registeredComponents) || componentsContext.registeredComponents;
                }
              });
              close_frag($$anchor4, fragment_3);
            },
            null
          );
          close_frag($$anchor3, fragment_2);
        },
        null
      );
      if_block(
        node_4,
        () => blocks(),
        ($$anchor3) => {
          var fragment_4 = open_frag($$anchor3, true, frag_24);
          var node_5 = child_frag(fragment_4);
          validate_each_keys(() => blocks(), (block) => {
            return "block-style-" + unwrap(block).id;
          });
          each_keyed(
            node_5,
            () => blocks(),
            5,
            (block) => {
              return "block-style-" + unwrap(block).id;
            },
            ($$anchor4, block, $$index_1) => {
              var fragment_5 = open_frag($$anchor4, true, each_block_13);
              var node_6 = child_frag(fragment_5);
              validate_component(Block_styles)(node_6, {
                get block() {
                  return unwrap(block);
                },
                get context() {
                  return $context() || $builderContext();
                }
              });
              close_frag($$anchor4, fragment_5);
            },
            null
          );
          close_frag($$anchor3, fragment_4);
        },
        null
      );
      close_frag($$anchor2, fragment_1);
    })
  });
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/columns/columns.svelte
var frag_17 = template(`<!>`, true);
var each_block4 = template(`<div><!></div>`);
var frag11 = template(`<div><!> <!></div>`);
function Columns($$anchor, $$props) {
  if (new.target === Columns)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $builderContext = () => (validate_store(builderContext(), "builderContext"), store_get(builderContext(), "$builderContext", $$subscriptions));
  const columnsCssVars = source();
  const columnsStyles = source();
  let js = prop($$props, "js");
  let space = prop_source($$props, "space", void 0, false);
  let columns = prop_source($$props, "columns", void 0, false);
  let stackColumnsAt = prop_source($$props, "stackColumnsAt", void 0, false);
  let reverseColumnsWhenStacked = prop_source($$props, "reverseColumnsWhenStacked", void 0, false);
  let builderContext = prop($$props, "builderContext");
  let builderBlock = prop($$props, "builderBlock");
  let builderComponents = prop($$props, "builderComponents");
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  function getWidth(index2) {
    var _a;
    return ((_a = cols[index2]) == null ? void 0 : _a.width) || 100 / cols.length;
  }
  function getColumnCssWidth(index2) {
    const subtractWidth = gutterSize * (cols.length - 1) / cols.length;
    return `calc(${getWidth(index2)}% - ${subtractWidth}px)`;
  }
  function getTabletStyle({ stackedStyle, desktopStyle }) {
    return stackAt === "tablet" ? stackedStyle : desktopStyle;
  }
  function getMobileStyle({ stackedStyle, desktopStyle }) {
    return stackAt === "never" ? desktopStyle : stackedStyle;
  }
  function columnCssVars(index2) {
    const gutter = index2 === 0 ? 0 : gutterSize;
    const width = getColumnCssWidth(index2);
    const gutterPixels = `${gutter}px`;
    const mobileWidth = "100%";
    const mobileMarginLeft = 0;
    const marginLeftKey = "margin-left";
    return {
      width,
      [marginLeftKey]: gutterPixels,
      "--column-width-mobile": getMobileStyle({
        stackedStyle: mobileWidth,
        desktopStyle: width
      }),
      "--column-margin-left-mobile": getMobileStyle({
        stackedStyle: mobileMarginLeft,
        desktopStyle: gutterPixels
      }),
      "--column-width-tablet": getTabletStyle({
        stackedStyle: mobileWidth,
        desktopStyle: width
      }),
      "--column-margin-left-tablet": getTabletStyle({
        stackedStyle: mobileMarginLeft,
        desktopStyle: gutterPixels
      })
    };
  }
  function getWidthForBreakpointSize(size) {
    var _a, _b;
    const breakpointSizes = getSizesForBreakpoints(((_b = (_a = $builderContext().content) == null ? void 0 : _a.meta) == null ? void 0 : _b.breakpoints) || {});
    return breakpointSizes[size].max;
  }
  let gutterSize = typeof get(space) === "number" ? get(space) || 0 : 20;
  let cols = get(columns) || [];
  let stackAt = get(stackColumnsAt) || "tablet";
  let flexDir = get(stackColumnsAt) === "never" ? "row" : get(reverseColumnsWhenStacked) ? "column-reverse" : "column";
  pre_effect(() => {
    untrack(() => {
      set(columnsCssVars, () => {
        return {
          "--flex-dir": flexDir,
          "--flex-dir-tablet": getTabletStyle({
            stackedStyle: flexDir,
            desktopStyle: "row"
          })
        };
      });
    });
  });
  pre_effect(() => {
    builderBlock();
    untrack(() => {
      set(columnsStyles, () => {
        return `
        @media (max-width: ${getWidthForBreakpointSize("medium")}px) {
          .${builderBlock().id}-breakpoints {
            flex-direction: var(--flex-dir-tablet);
            align-items: stretch;
          }

          .${builderBlock().id}-breakpoints > .builder-column {
            width: var(--column-width-tablet) !important;
            margin-left: var(--column-margin-left-tablet) !important;
          }
        }

        @media (max-width: ${getWidthForBreakpointSize("small")}px) {
          .${builderBlock().id}-breakpoints {
            flex-direction: var(--flex-dir);
            align-items: stretch;
          }

          .${builderBlock().id}-breakpoints > .builder-column {
            width: var(--column-width-mobile) !important;
            margin-left: var(--column-margin-left-mobile) !important;
          }
        },
      `;
      });
    });
  });
  var div = open($$anchor, true, frag11);
  let spread_attributes2;
  var node_1 = child(div);
  var node_3 = sibling(sibling(node_1));
  validate_each_keys(() => get(columns), (column) => {
    return get(index);
  });
  render_effect(() => {
    spread_attributes2 = spread_attributes(
      div,
      spread_attributes2,
      [
        {
          class: `builder-columns ${builderBlock().id}-breakpoints div`
        },
        {}
      ],
      "svelte-9u6q02"
    );
  });
  action(div, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => get(columnsCssVars)());
  if_block(
    node_1,
    () => TARGET !== "reactNative",
    ($$anchor2) => {
      var fragment = open_frag($$anchor2, true, frag_17);
      var node_2 = child_frag(fragment);
      validate_component(Inlined_styles)(node_2, {
        get styles() {
          return get(columnsStyles)();
        }
      });
      close_frag($$anchor2, fragment);
    },
    null
  );
  each_indexed(
    node_3,
    () => get(columns),
    1,
    ($$anchor2, column, index2) => {
      var div_1 = open($$anchor2, true, each_block4);
      spread_attributes(div_1, null, [{ class: "builder-column div-2" }, {}], "svelte-9u6q02");
      var node_4 = child(div_1);
      action(div_1, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => columnCssVars(get(index2)));
      validate_component(Blocks)(node_4, {
        get path() {
          return `component.options.columns.${get(index2)}.blocks`;
        },
        get parent() {
          return builderBlock().id;
        },
        styleProp: { flexGrow: "1" },
        get context() {
          return builderContext();
        },
        get registeredComponents() {
          return builderComponents();
        },
        get blocks() {
          return unwrap(column).blocks;
        }
      });
      close($$anchor2, div_1);
    },
    null
  );
  close($$anchor, div);
  pop();
  append_styles($$anchor, "svelte-9u6q02", "\n  .div.svelte-9u6q02 {\n    display: flex;\n    line-height: normal;\n  }\n  .div-2.svelte-9u6q02 {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n  }\n");
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/fragment/fragment.svelte
var frag12 = template(`<span><!></span>`);
function Fragment($$anchor, $$props) {
  if (new.target === Fragment)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  var span = open($$anchor, true, frag12);
  var node = child(span);
  slot(node, unwrap($$props).children, {}, null);
  close($$anchor, span);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/image/image.helpers.js
function removeProtocol(path) {
  return path.replace(/http(s)?:/, "");
}
function updateQueryParam(uri = "", key3, value) {
  const re = new RegExp("([?&])" + key3 + "=.*?(&|$)", "i");
  const separator = uri.indexOf("?") !== -1 ? "&" : "?";
  if (uri.match(re)) {
    return uri.replace(re, "$1" + key3 + "=" + encodeURIComponent(value) + "$2");
  }
  return uri + separator + key3 + "=" + encodeURIComponent(value);
}
function getShopifyImageUrl(src, size) {
  if (!src || !(src == null ? void 0 : src.match(/cdn\.shopify\.com/)) || !size) {
    return src;
  }
  if (size === "master") {
    return removeProtocol(src);
  }
  const match = src.match(/(_\d+x(\d+)?)?(\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?)/i);
  if (match) {
    const prefix = src.split(match[0]);
    const suffix = match[3];
    const useSize = size.match("x") ? size : `${size}x`;
    return removeProtocol(`${prefix[0]}_${useSize}${suffix}`);
  }
  return null;
}
function getSrcSet(url) {
  if (!url) {
    return url;
  }
  const sizes = [100, 200, 400, 800, 1200, 1600, 2e3];
  if (url.match(/builder\.io/)) {
    let srcUrl = url;
    const widthInSrc = Number(url.split("?width=")[1]);
    if (!isNaN(widthInSrc)) {
      srcUrl = `${srcUrl} ${widthInSrc}w`;
    }
    return sizes.filter((size) => size !== widthInSrc).map((size) => `${updateQueryParam(url, "width", size)} ${size}w`).concat([srcUrl]).join(", ");
  }
  if (url.match(/cdn\.shopify\.com/)) {
    return sizes.map((size) => [getShopifyImageUrl(url, `${size}x${size}`), size]).filter(([sizeUrl]) => !!sizeUrl).map(([sizeUrl, size]) => `${sizeUrl} ${size}w`).concat([url]).join(", ");
  }
  return url;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/image/image.svelte
var frag_18 = template(`<source type="image/webp">`);
var frag_25 = template(`<div class="builder-image-sizer div svelte-1udbavg"></div>`);
var frag_32 = template(`<!>`, true);
var frag_42 = template(`<div class="div-2 svelte-1udbavg"><!></div>`);
var frag13 = template(`<picture><!> <img loading="lazy"></picture> <!> <!> <!>`, true);
function Image($$anchor, $$props) {
  if (new.target === Image)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  const $$slots = sanitize_slots($$props);
  push($$props, false);
  const srcSetToUse = source();
  const webpSrcSet = source();
  const aspectRatioCss = source();
  let image = prop($$props, "image");
  let src = prop_source($$props, "src", void 0, false);
  let srcset = prop_source($$props, "srcset", void 0, false);
  let noWebp = prop_source($$props, "noWebp", void 0, false);
  let aspectRatio = prop_source($$props, "aspectRatio", void 0, false);
  let altText = prop_source($$props, "altText", void 0, false);
  let backgroundPosition = prop_source($$props, "backgroundPosition", void 0, false);
  let backgroundSize = prop_source($$props, "backgroundSize", void 0, false);
  let className = prop_source($$props, "className", void 0, false);
  let sizes = prop_source($$props, "sizes", void 0, false);
  let builderBlock = prop_source($$props, "builderBlock", void 0, false);
  let fitContent = prop_source($$props, "fitContent", void 0, false);
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  pre_effect(() => {
    image(), get(src), get(srcset);
    untrack(() => {
      set(srcSetToUse, () => {
        var _a;
        const imageToUse = image() || get(src);
        const url = imageToUse;
        if (!url || // We can auto add srcset for cdn.builder.io and shopify
        // images, otherwise you can supply this prop manually
        !(url.match(/builder\.io/) || url.match(/cdn\.shopify\.com/))) {
          return get(srcset);
        }
        if (get(srcset) && ((_a = image()) == null ? void 0 : _a.includes("builder.io/api/v1/image"))) {
          if (!get(srcset).includes(image().split("?")[0])) {
            console.debug("Removed given srcset");
            return getSrcSet(url);
          }
        } else if (image() && !get(srcset)) {
          return getSrcSet(url);
        }
        return getSrcSet(url);
      });
    });
  });
  pre_effect(() => {
    get(srcSetToUse), get(noWebp);
    untrack(() => {
      set(webpSrcSet, () => {
        var _a, _b;
        if (((_b = (_a = get(srcSetToUse)) == null ? void 0 : _a()) == null ? void 0 : _b.match(/builder\.io/)) && !get(noWebp)) {
          return get(srcSetToUse)().replace(/\?/g, "?format=webp&");
        } else {
          return "";
        }
      });
    });
  });
  pre_effect(() => {
    get(aspectRatio);
    untrack(() => {
      set(aspectRatioCss, () => {
        const aspectRatioStyles = {
          position: "absolute",
          height: "100%",
          width: "100%",
          left: "0px",
          top: "0px"
        };
        const out = get(aspectRatio) ? aspectRatioStyles : void 0;
        return out;
      });
    });
  });
  var fragment = open_frag($$anchor, true, frag13);
  var picture = child_frag(fragment);
  var node_1 = child(picture);
  var img = sibling(sibling(node_1));
  var node_2 = sibling(sibling(picture));
  var node_3 = sibling(sibling(node_2));
  var node_5 = sibling(sibling(node_3));
  attr_effect(img, "srcset", () => get(srcSetToUse)());
  var img_alt;
  var img_role;
  var img_src;
  var img_sizes;
  render_effect(() => {
    if (img_alt !== (img_alt = get(altText))) {
      attr(img, "alt", img_alt);
    }
    if (img_role !== (img_role = get(altText) ? "presentation" : void 0)) {
      attr(img, "role", img_role);
    }
    class_name(img, `${stringify("builder-image" + (get(className) ? " " + get(className) : "") + " img")} svelte-1udbavg`);
    if (img_src !== (img_src = image())) {
      attr(img, "src", img_src);
    }
    if (img_sizes !== (img_sizes = get(sizes))) {
      attr(img, "sizes", img_sizes);
    }
  });
  if_block(
    node_1,
    () => get(webpSrcSet)(),
    ($$anchor2) => {
      var source2 = open($$anchor2, true, frag_18);
      attr_effect(source2, "srcset", () => get(webpSrcSet)());
      close($$anchor2, source2);
    },
    null
  );
  action(img, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => ({
    objectPosition: get(backgroundPosition) || "center",
    objectFit: get(backgroundSize) || "cover",
    ...get(aspectRatioCss)()
  }));
  if_block(
    node_2,
    () => {
      var _a, _b;
      return get(aspectRatio) && !(((_b = (_a = get(builderBlock)) == null ? void 0 : _a.children) == null ? void 0 : _b.length) && get(fitContent));
    },
    ($$anchor2) => {
      var div = open($$anchor2, true, frag_25);
      action(div, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => ({
        paddingTop: get(aspectRatio) * 100 + "%"
      }));
      close($$anchor2, div);
    },
    null
  );
  if_block(
    node_3,
    () => {
      var _a, _b;
      return ((_b = (_a = get(builderBlock)) == null ? void 0 : _a.children) == null ? void 0 : _b.length) && get(fitContent);
    },
    ($$anchor2) => {
      var fragment_1 = open_frag($$anchor2, true, frag_32);
      var node_4 = child_frag(fragment_1);
      slot(node_4, unwrap($$props).children, {}, null);
      close_frag($$anchor2, fragment_1);
    },
    null
  );
  if_block(
    node_5,
    () => !get(fitContent) && $$slots.default,
    ($$anchor2) => {
      var div_1 = open($$anchor2, true, frag_42);
      var node_6 = child(div_1);
      slot(node_6, unwrap($$props).children, {}, null);
      close($$anchor2, div_1);
    },
    null
  );
  close_frag($$anchor, fragment);
  pop();
  append_styles($$anchor, "svelte-1udbavg", "\n  .img.svelte-1udbavg {\n    opacity: 1;\n    transition: opacity 0.2s ease-in-out;\n  }\n  .div.svelte-1udbavg {\n    width: 100%;\n    pointer-events: none;\n    font-size: 0;\n  }\n  .div-2.svelte-1udbavg {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n");
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/section/section.svelte
var frag14 = template(`<section><!></section>`);
function Section($$anchor, $$props) {
  if (new.target === Section)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let attributes = prop_source($$props, "attributes", void 0, false);
  let maxWidth = prop_source($$props, "maxWidth", void 0, false);
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  var section = open($$anchor, true, frag14);
  let spread_attributes2;
  var node_1 = child(section);
  slot(node_1, unwrap($$props).children, {}, null);
  render_effect(() => {
    spread_attributes2 = spread_attributes(section, spread_attributes2, [filterAttrs(get(attributes), "on:", false)], "");
  });
  action(section, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => ({
    width: "100%",
    alignSelf: "stretch",
    flexGrow: 1,
    boxSizing: "border-box",
    maxWidth: get(maxWidth) || 1200,
    display: "flex",
    flexDirection: "column",
    alignItems: "stretch",
    marginLeft: "auto",
    marginRight: "auto"
  }));
  action(section, ($$node, $$props2) => setAttrs($$node, $$props2), () => filterAttrs(get(attributes), "on:", true));
  close($$anchor, section);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/content-variants/helpers.js
var getVariants = (content) => Object.values((content == null ? void 0 : content.variations) || {}).map((variant) => ({
  ...variant,
  testVariationId: variant.id,
  id: content == null ? void 0 : content.id
}));
var checkShouldRunVariants = ({ canTrack, content }) => {
  const hasVariants = getVariants(content).length > 0;
  if (TARGET === "reactNative")
    return false;
  if (!hasVariants)
    return false;
  if (!canTrack)
    return false;
  if (TARGET === "vue2" || TARGET === "vue3")
    return true;
  if (isBrowser())
    return false;
  return true;
};
function bldrAbTest(contentId, variants, isHydrationTarget2) {
  var _a;
  function getAndSetVariantId2() {
    function setCookie2(name, value, days) {
      let expires = "";
      if (days) {
        const date = /* @__PURE__ */ new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1e3);
        expires = "; expires=" + date.toUTCString();
      }
      document.cookie = name + "=" + (value || "") + expires + "; path=/; Secure; SameSite=None";
    }
    function getCookie2(name) {
      const nameEQ = name + "=";
      const ca = document.cookie.split(";");
      for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === " ")
          c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0)
          return c.substring(nameEQ.length, c.length);
      }
      return null;
    }
    const cookieName = `builder.tests.${contentId}`;
    const variantInCookie = getCookie2(cookieName);
    const availableIDs = variants.map((vr) => vr.id).concat(contentId);
    if (variantInCookie && availableIDs.includes(variantInCookie)) {
      return variantInCookie;
    }
    let n = 0;
    const random = Math.random();
    for (let i = 0; i < variants.length; i++) {
      const variant = variants[i];
      const testRatio = variant.testRatio;
      n += testRatio;
      if (random < n) {
        setCookie2(cookieName, variant.id);
        return variant.id;
      }
    }
    setCookie2(cookieName, contentId);
    return contentId;
  }
  const winningVariantId = getAndSetVariantId2();
  const styleEl = (_a = document.currentScript) == null ? void 0 : _a.previousElementSibling;
  if (isHydrationTarget2) {
    styleEl.remove();
    const thisScriptEl = document.currentScript;
    thisScriptEl == null ? void 0 : thisScriptEl.remove();
  } else {
    const newStyleStr = variants.concat({
      id: contentId
    }).filter((variant) => variant.id !== winningVariantId).map((value) => {
      return `.variant-${value.id} {  display: none; }
        `;
    }).join("");
    styleEl.innerHTML = newStyleStr;
  }
}
function bldrCntntScrpt(variantContentId, defaultContentId, isHydrationTarget2) {
  var _a;
  if (!navigator.cookieEnabled) {
    return;
  }
  function getCookie2(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(";");
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === " ")
        c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0)
        return c.substring(nameEQ.length, c.length);
    }
    return null;
  }
  const cookieName = `builder.tests.${defaultContentId}`;
  const variantId = getCookie2(cookieName);
  const parentDiv = (_a = document.currentScript) == null ? void 0 : _a.parentElement;
  const variantIsDefaultContent = variantContentId === defaultContentId;
  if (variantId === variantContentId) {
    if (variantIsDefaultContent) {
      return;
    }
    parentDiv == null ? void 0 : parentDiv.removeAttribute("hidden");
    parentDiv == null ? void 0 : parentDiv.removeAttribute("aria-hidden");
  } else {
    if (variantIsDefaultContent) {
      if (isHydrationTarget2) {
        parentDiv == null ? void 0 : parentDiv.remove();
      } else {
        parentDiv == null ? void 0 : parentDiv.setAttribute("hidden", "true");
        parentDiv == null ? void 0 : parentDiv.setAttribute("aria-hidden", "true");
      }
    }
    return;
  }
  return;
}
var getIsHydrationTarget = (target) => target === "react" || target === "reactNative";
var isHydrationTarget = getIsHydrationTarget(TARGET);
var AB_TEST_FN_NAME = "builderIoAbTest";
var CONTENT_FN_NAME = "builderIoRenderContent";
var getScriptString = () => {
  const fnStr = bldrAbTest.toString().replace(/\s+/g, " ");
  const fnStr2 = bldrCntntScrpt.toString().replace(/\s+/g, " ");
  return `
  window.${AB_TEST_FN_NAME} = ${fnStr}
  window.${CONTENT_FN_NAME} = ${fnStr2}
  `;
};
var getVariantsScriptString = (variants, contentId) => {
  return `
  window.${AB_TEST_FN_NAME}("${contentId}",${JSON.stringify(variants)}, ${isHydrationTarget})`;
};
var getRenderContentScriptString = ({ contentId, variationId }) => {
  return `
  window.${CONTENT_FN_NAME}("${variationId}", "${contentId}", ${isHydrationTarget})`;
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/button/component-info.js
var componentInfo = {
  name: "Core:Button",
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F81a15681c3e74df09677dfc57a615b13",
  defaultStyles: {
    // TODO: make min width more intuitive and set one
    appearance: "none",
    paddingTop: "15px",
    paddingBottom: "15px",
    paddingLeft: "25px",
    paddingRight: "25px",
    backgroundColor: "#000000",
    color: "white",
    borderRadius: "4px",
    textAlign: "center",
    cursor: "pointer"
  },
  inputs: [{
    name: "text",
    type: "text",
    defaultValue: "Click me!",
    bubble: true
  }, {
    name: "link",
    type: "url",
    bubble: true
  }, {
    name: "openLinkInNewTab",
    type: "boolean",
    defaultValue: false,
    friendlyName: "Open link in new tab"
  }],
  static: true,
  noWrap: true
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/columns/component-info.js
var componentInfo2 = {
  // TODO: ways to statically preprocess JSON for references, functions, etc
  name: "Columns",
  isRSC: true,
  inputs: [{
    name: "columns",
    type: "array",
    broadcast: true,
    subFields: [{
      name: "blocks",
      type: "array",
      hideFromUI: true,
      defaultValue: [{
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto",
            minHeight: "20px",
            minWidth: "20px",
            overflow: "hidden"
          }
        },
        component: {
          name: "Image",
          options: {
            image: "https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d",
            backgroundPosition: "center",
            backgroundSize: "cover",
            aspectRatio: 0.7004048582995948
          }
        }
      }, {
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto"
          }
        },
        component: {
          name: "Text",
          options: {
            text: "<p>Enter some text...</p>"
          }
        }
      }]
    }, {
      name: "width",
      type: "number",
      hideFromUI: true,
      helperText: "Width %, e.g. set to 50 to fill half of the space"
    }, {
      name: "link",
      type: "url",
      helperText: "Optionally set a url that clicking this column will link to"
    }],
    defaultValue: [{
      blocks: [{
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto",
            minHeight: "20px",
            minWidth: "20px",
            overflow: "hidden"
          }
        },
        component: {
          name: "Image",
          options: {
            image: "https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d",
            backgroundPosition: "center",
            backgroundSize: "cover",
            aspectRatio: 0.7004048582995948
          }
        }
      }, {
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto"
          }
        },
        component: {
          name: "Text",
          options: {
            text: "<p>Enter some text...</p>"
          }
        }
      }]
    }, {
      blocks: [{
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto",
            minHeight: "20px",
            minWidth: "20px",
            overflow: "hidden"
          }
        },
        component: {
          name: "Image",
          options: {
            image: "https://builder.io/api/v1/image/assets%2Fpwgjf0RoYWbdnJSbpBAjXNRMe9F2%2Ffb27a7c790324294af8be1c35fe30f4d",
            backgroundPosition: "center",
            backgroundSize: "cover",
            aspectRatio: 0.7004048582995948
          }
        }
      }, {
        "@type": "@builder.io/sdk:Element",
        responsiveStyles: {
          large: {
            display: "flex",
            flexDirection: "column",
            alignItems: "stretch",
            flexShrink: "0",
            position: "relative",
            marginTop: "30px",
            textAlign: "center",
            lineHeight: "normal",
            height: "auto"
          }
        },
        component: {
          name: "Text",
          options: {
            text: "<p>Enter some text...</p>"
          }
        }
      }]
    }],
    onChange: (options) => {
      function clearWidths() {
        columns.forEach((col) => {
          col.delete("width");
        });
      }
      const columns = options.get("columns");
      if (Array.isArray(columns)) {
        const containsColumnWithWidth = !!columns.find((col) => col.get("width"));
        if (containsColumnWithWidth) {
          const containsColumnWithoutWidth = !!columns.find((col) => !col.get("width"));
          if (containsColumnWithoutWidth) {
            clearWidths();
          } else {
            const sumWidths = columns.reduce((memo, col) => {
              return memo + col.get("width");
            }, 0);
            const widthsDontAddUp = sumWidths !== 100;
            if (widthsDontAddUp) {
              clearWidths();
            }
          }
        }
      }
    }
  }, {
    name: "space",
    type: "number",
    defaultValue: 20,
    helperText: "Size of gap between columns",
    advanced: true
  }, {
    name: "stackColumnsAt",
    type: "string",
    defaultValue: "tablet",
    helperText: "Convert horizontal columns to vertical at what device size",
    enum: ["tablet", "mobile", "never"],
    advanced: true
  }, {
    name: "reverseColumnsWhenStacked",
    type: "boolean",
    defaultValue: false,
    helperText: "When stacking columns for mobile devices, reverse the ordering",
    advanced: true
  }]
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/fragment/component-info.js
var componentInfo3 = {
  name: "Fragment",
  static: true,
  hidden: true,
  canHaveChildren: true,
  noWrap: true
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/image/component-info.js
var componentInfo4 = {
  name: "Image",
  static: true,
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4",
  defaultStyles: {
    position: "relative",
    minHeight: "20px",
    minWidth: "20px",
    overflow: "hidden"
  },
  canHaveChildren: true,
  inputs: [{
    name: "image",
    type: "file",
    bubble: true,
    allowedFileTypes: ["jpeg", "jpg", "png", "svg"],
    required: true,
    defaultValue: "https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F72c80f114dc149019051b6852a9e3b7a",
    onChange: (options) => {
      const DEFAULT_ASPECT_RATIO = 0.7041;
      options.delete("srcset");
      options.delete("noWebp");
      function loadImage(url, timeout = 6e4) {
        return new Promise((resolve, reject) => {
          const img = document.createElement("img");
          let loaded = false;
          img.onload = () => {
            loaded = true;
            resolve(img);
          };
          img.addEventListener("error", (event2) => {
            console.warn("Image load failed", event2.error);
            reject(event2.error);
          });
          img.src = url;
          setTimeout(() => {
            if (!loaded) {
              reject(new Error("Image load timed out"));
            }
          }, timeout);
        });
      }
      function round2(num) {
        return Math.round(num * 1e3) / 1e3;
      }
      const value = options.get("image");
      const aspectRatio = options.get("aspectRatio");
      fetch(value).then((res) => res.blob()).then((blob) => {
        if (blob.type.includes("svg")) {
          options.set("noWebp", true);
        }
      });
      if (value && (!aspectRatio || aspectRatio === DEFAULT_ASPECT_RATIO)) {
        return loadImage(value).then((img) => {
          const possiblyUpdatedAspectRatio = options.get("aspectRatio");
          if (options.get("image") === value && (!possiblyUpdatedAspectRatio || possiblyUpdatedAspectRatio === DEFAULT_ASPECT_RATIO)) {
            if (img.width && img.height) {
              options.set("aspectRatio", round2(img.height / img.width));
              options.set("height", img.height);
              options.set("width", img.width);
            }
          }
        });
      }
    }
  }, {
    name: "backgroundSize",
    type: "text",
    defaultValue: "cover",
    enum: [{
      label: "contain",
      value: "contain",
      helperText: "The image should never get cropped"
    }, {
      label: "cover",
      value: "cover",
      helperText: "The image should fill it's box, cropping when needed"
    }]
  }, {
    name: "backgroundPosition",
    type: "text",
    defaultValue: "center",
    enum: ["center", "top", "left", "right", "bottom", "top left", "top right", "bottom left", "bottom right"]
  }, {
    name: "altText",
    type: "string",
    helperText: "Text to display when the user has images off"
  }, {
    name: "height",
    type: "number",
    hideFromUI: true
  }, {
    name: "width",
    type: "number",
    hideFromUI: true
  }, {
    name: "sizes",
    type: "string",
    hideFromUI: true
  }, {
    name: "srcset",
    type: "string",
    hideFromUI: true
  }, {
    name: "lazy",
    type: "boolean",
    defaultValue: true,
    hideFromUI: true
  }, {
    name: "fitContent",
    type: "boolean",
    helperText: "When child blocks are provided, fit to them instead of using the image's aspect ratio",
    defaultValue: true
  }, {
    name: "aspectRatio",
    type: "number",
    helperText: "This is the ratio of height/width, e.g. set to 1.5 for a 300px wide and 200px tall photo. Set to 0 to not force the image to maintain it's aspect ratio",
    advanced: true,
    defaultValue: 0.7041
  }]
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/section/component-info.js
var componentInfo5 = {
  name: "Core:Section",
  static: true,
  image: "https://cdn.builder.io/api/v1/image/assets%2FIsxPKMo2gPRRKeakUztj1D6uqed2%2F682efef23ace49afac61748dd305c70a",
  inputs: [{
    name: "maxWidth",
    type: "number",
    defaultValue: 1200
  }, {
    name: "lazyLoad",
    type: "boolean",
    defaultValue: false,
    advanced: true,
    description: "Only render this section when in view"
  }],
  defaultStyles: {
    paddingLeft: "20px",
    paddingRight: "20px",
    paddingTop: "50px",
    paddingBottom: "50px",
    marginTop: "0px",
    width: "100vw",
    marginLeft: "calc(50% - 50vw)"
  },
  canHaveChildren: true,
  defaultChildren: [{
    "@type": "@builder.io/sdk:Element",
    responsiveStyles: {
      large: {
        textAlign: "center"
      }
    },
    component: {
      name: "Text",
      options: {
        text: "<p><b>I am a section! My content keeps from getting too wide, so that it's easy to read even on big screens.</b></p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur</p>"
      }
    }
  }]
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/symbol/component-info.js
var componentInfo6 = {
  name: "Symbol",
  noWrap: true,
  static: true,
  isRSC: true,
  inputs: [{
    name: "symbol",
    type: "uiSymbol"
  }, {
    name: "dataOnly",
    helperText: "Make this a data symbol that doesn't display any UI",
    type: "boolean",
    defaultValue: false,
    advanced: true,
    hideFromUI: true
  }, {
    name: "inheritState",
    helperText: "Inherit the parent component state and data",
    type: "boolean",
    defaultValue: false,
    advanced: true
  }, {
    name: "renderToLiquid",
    helperText: "Render this symbols contents to liquid. Turn off to fetch with javascript and use custom targeting",
    type: "boolean",
    defaultValue: false,
    advanced: true,
    hideFromUI: true
  }, {
    name: "useChildren",
    hideFromUI: true,
    type: "boolean"
  }]
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/text/component-info.js
var componentInfo7 = {
  name: "Text",
  static: true,
  isRSC: true,
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-text_fields-24px%20(1).svg?alt=media&token=12177b73-0ee3-42ca-98c6-0dd003de1929",
  inputs: [{
    name: "text",
    type: "html",
    required: true,
    autoFocus: true,
    bubble: true,
    defaultValue: "Enter some text..."
  }],
  defaultStyles: {
    lineHeight: "normal",
    height: "auto",
    textAlign: "center"
  }
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/text/text.svelte
var frag15 = template(`<div class="builder-text"><!></div>`);
function Text($$anchor, $$props) {
  if (new.target === Text)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let text2 = prop_source($$props, "text", void 0, false);
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  var div = open($$anchor, true, frag15);
  var node_1 = child(div);
  html(node_1, () => {
    var _a;
    return ((_a = get(text2)) == null ? void 0 : _a.toString()) || "";
  }, false);
  action(div, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => ({ outline: "none" }));
  close($$anchor, div);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/video/component-info.js
var componentInfo8 = {
  name: "Video",
  canHaveChildren: true,
  defaultStyles: {
    minHeight: "20px",
    minWidth: "20px"
  },
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-videocam-24px%20(1).svg?alt=media&token=49a84e4a-b20e-4977-a650-047f986874bb",
  inputs: [{
    name: "video",
    type: "file",
    allowedFileTypes: ["mp4"],
    bubble: true,
    defaultValue: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/assets%2FKQlEmWDxA0coC3PK6UvkrjwkIGI2%2F28cb070609f546cdbe5efa20e931aa4b?alt=media&token=912e9551-7a7c-4dfb-86b6-3da1537d1a7f",
    required: true
  }, {
    name: "posterImage",
    type: "file",
    allowedFileTypes: ["jpeg", "png"],
    helperText: "Image to show before the video plays"
  }, {
    name: "autoPlay",
    type: "boolean",
    defaultValue: true
  }, {
    name: "controls",
    type: "boolean",
    defaultValue: false
  }, {
    name: "muted",
    type: "boolean",
    defaultValue: true
  }, {
    name: "loop",
    type: "boolean",
    defaultValue: true
  }, {
    name: "playsInline",
    type: "boolean",
    defaultValue: true
  }, {
    name: "fit",
    type: "text",
    defaultValue: "cover",
    enum: ["contain", "cover", "fill", "auto"]
  }, {
    name: "preload",
    type: "text",
    defaultValue: "metadata",
    enum: ["auto", "metadata", "none"]
  }, {
    name: "fitContent",
    type: "boolean",
    helperText: "When child blocks are provided, fit to them instead of using the aspect ratio",
    defaultValue: true,
    advanced: true
  }, {
    name: "position",
    type: "text",
    defaultValue: "center",
    enum: ["center", "top", "left", "right", "bottom", "top left", "top right", "bottom left", "bottom right"]
  }, {
    name: "height",
    type: "number",
    advanced: true
  }, {
    name: "width",
    type: "number",
    advanced: true
  }, {
    name: "aspectRatio",
    type: "number",
    advanced: true,
    defaultValue: 0.7004048582995948
  }, {
    name: "lazyLoad",
    type: "boolean",
    helperText: 'Load this video "lazily" - as in only when a user scrolls near the video. Recommended for optmized performance and bandwidth consumption',
    defaultValue: true,
    advanced: true
  }]
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/video/video.svelte
var frag16 = template(`<video></video>`);
function Video($$anchor, $$props) {
  if (new.target === Video)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const videoProps = source();
  const spreadProps = source();
  let autoPlay = prop_source($$props, "autoPlay", void 0, false);
  let muted = prop_source($$props, "muted", void 0, false);
  let controls = prop_source($$props, "controls", void 0, false);
  let loop = prop_source($$props, "loop", void 0, false);
  let playsInline = prop_source($$props, "playsInline", void 0, false);
  let attributes = prop_source($$props, "attributes", void 0, false);
  let preload = prop_source($$props, "preload", void 0, false);
  let fit = prop_source($$props, "fit", void 0, false);
  let position = prop_source($$props, "position", void 0, false);
  let video = prop_source($$props, "video", void 0, false);
  let posterImage = prop_source($$props, "posterImage", void 0, false);
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  pre_effect(() => {
    get(autoPlay), get(muted), get(controls), get(loop), get(playsInline);
    untrack(() => {
      set(videoProps, () => {
        return {
          ...get(autoPlay) === true ? { autoPlay: true } : {},
          ...get(muted) === true ? { muted: true } : {},
          ...get(controls) === true ? { controls: true } : {},
          ...get(loop) === true ? { loop: true } : {},
          ...get(playsInline) === true ? { playsInline: true } : {}
        };
      });
    });
  });
  pre_effect(() => {
    get(attributes), get(videoProps);
    untrack(() => {
      set(spreadProps, () => {
        return {
          ...get(attributes),
          ...get(videoProps)()
        };
      });
    });
  });
  var video_1 = open($$anchor, true, frag16);
  let spread_attributes2;
  render_effect(() => {
    spread_attributes2 = spread_attributes(
      video_1,
      spread_attributes2,
      [
        get(spreadProps)(),
        { preload: get(preload) || "metadata" },
        { src: get(video) || "no-src" },
        { poster: get(posterImage) }
      ],
      ""
    );
  });
  action(video_1, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => {
    var _a;
    return {
      width: "100%",
      height: "100%",
      ...(_a = get(attributes)) == null ? void 0 : _a.style,
      objectFit: get(fit),
      objectPosition: get(position),
      // Hack to get object fit to work as expected and
      // not have the video overflow
      borderRadius: 1
    };
  });
  close($$anchor, video_1);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/embed/component-info.js
var componentInfo9 = {
  name: "Embed",
  static: true,
  inputs: [{
    name: "url",
    type: "url",
    required: true,
    defaultValue: "",
    helperText: "e.g. enter a youtube url, google map, etc",
    onChange: (options) => {
      const url = options.get("url");
      if (url) {
        options.set("content", "Loading...");
        const apiKey = "ae0e60e78201a3f2b0de4b";
        return fetch(`https://iframe.ly/api/iframely?url=${url}&api_key=${apiKey}`).then((res) => res.json()).then((data) => {
          if (options.get("url") === url) {
            if (data.html) {
              options.set("content", data.html);
            } else {
              options.set("content", "Invalid url, please try another");
            }
          }
        }).catch((_err) => {
          options.set("content", "There was an error embedding this URL, please try again or another URL");
        });
      } else {
        options.delete("content");
      }
    }
  }, {
    name: "content",
    type: "html",
    defaultValue: '<div style="padding: 20px; text-align: center">(Choose an embed URL)<div>',
    hideFromUI: true
  }]
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/embed/helpers.js
var SCRIPT_MIME_TYPES = ["text/javascript", "application/javascript", "application/ecmascript"];
var isJsScript = (script) => SCRIPT_MIME_TYPES.includes(script.type);

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/embed/embed.svelte
var frag17 = template(`<div class="builder-embed"><!></div>`);
function Embed($$anchor, $$props) {
  if (new.target === Embed)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let content = prop($$props, "content");
  function findAndRunScripts() {
    if (!get(elem) || !get(elem).getElementsByTagName)
      return;
    const scripts = get(elem).getElementsByTagName("script");
    for (let i = 0; i < scripts.length; i++) {
      const script = scripts[i];
      if (script.src && !scriptsInserted.includes(script.src)) {
        scriptsInserted.push(script.src);
        const newScript = document.createElement("script");
        newScript.async = true;
        newScript.src = script.src;
        document.head.appendChild(newScript);
      } else if (isJsScript(script) && !scriptsRun.includes(script.innerText)) {
        try {
          scriptsRun.push(script.innerText);
          new Function(script.innerText)();
        } catch (error) {
          console.warn("`Embed`: Error running script:", error);
        }
      }
    }
  }
  let elem = source();
  let scriptsInserted = [];
  let scriptsRun = [];
  let ranInitFn = source(false);
  function onUpdateFn_0(..._args) {
    if (get(elem) && !get(ranInitFn)) {
      set(ranInitFn, true);
      findAndRunScripts();
    }
  }
  pre_effect(() => {
    get(elem), get(ranInitFn);
    untrack(() => {
      onUpdateFn_0(...[get(elem), get(ranInitFn)]);
    });
  });
  var div = open($$anchor, true, frag17);
  bind_this(div, ($$value) => set(elem, $$value));
  var node = child(div);
  html(node, () => content(), false);
  close($$anchor, div);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/img/img.svelte
var frag18 = template(`<img>`);
function Img($$anchor, $$props) {
  if (new.target === Img)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let backgroundSize = prop_source($$props, "backgroundSize", void 0, false);
  let backgroundPosition = prop_source($$props, "backgroundPosition", void 0, false);
  let imgSrc = prop_source($$props, "imgSrc", void 0, false);
  let altText = prop_source($$props, "altText", void 0, false);
  let image = prop_source($$props, "image", void 0, false);
  let attributes = prop_source($$props, "attributes", void 0, false);
  function mitosis_styling(node, vars) {
    Object.entries(vars || {}).forEach(([p, v]) => {
      if (p.startsWith("--")) {
        node.style.setProperty(p, v);
      } else {
        node.style[p] = v;
      }
    });
  }
  var img = open($$anchor, true, frag18);
  let spread_attributes2;
  render_effect(() => {
    spread_attributes2 = spread_attributes(
      img,
      spread_attributes2,
      [
        {
          key: isEditing() && get(imgSrc) || "default-key"
        },
        { alt: get(altText) },
        { src: get(imgSrc) || get(image) },
        filterAttrs(get(attributes), "on:", false)
      ],
      ""
    );
  });
  action(img, ($$node, $$props2) => mitosis_styling($$node, $$props2), () => ({
    objectFit: get(backgroundSize) || "cover",
    objectPosition: get(backgroundPosition) || "center"
  }));
  action(img, ($$node, $$props2) => setAttrs($$node, $$props2), () => filterAttrs(get(attributes), "on:", true));
  close($$anchor, img);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/img/component-info.js
var componentInfo10 = {
  // friendlyName?
  name: "Raw:Img",
  hideFromInsertMenu: true,
  image: "https://firebasestorage.googleapis.com/v0/b/builder-3b0a2.appspot.com/o/images%2Fbaseline-insert_photo-24px.svg?alt=media&token=4e5d0ef4-f5e8-4e57-b3a9-38d63a9b9dc4",
  inputs: [{
    name: "image",
    bubble: true,
    type: "file",
    allowedFileTypes: ["jpeg", "jpg", "png", "svg", "gif", "webp"],
    required: true
  }],
  noWrap: true,
  static: true
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/custom-code/custom-code.svelte
var frag19 = template(`<div><!></div>`);
function Custom_code($$anchor, $$props) {
  if (new.target === Custom_code)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let replaceNodes = prop_source($$props, "replaceNodes", void 0, false);
  let code = prop($$props, "code");
  function findAndRunScripts() {
    if (get(elem) && get(elem).getElementsByTagName && typeof window !== "undefined") {
      const scripts = get(elem).getElementsByTagName("script");
      for (let i = 0; i < scripts.length; i++) {
        const script = scripts[i];
        if (script.src) {
          if (scriptsInserted.includes(script.src)) {
            continue;
          }
          scriptsInserted.push(script.src);
          const newScript = document.createElement("script");
          newScript.async = true;
          newScript.src = script.src;
          document.head.appendChild(newScript);
        } else if (!script.type || ["text/javascript", "application/javascript", "application/ecmascript"].includes(script.type)) {
          if (scriptsRun.includes(script.innerText)) {
            continue;
          }
          try {
            scriptsRun.push(script.innerText);
            new Function(script.innerText)();
          } catch (error) {
            console.warn("`CustomCode`: Error running script:", error);
          }
        }
      }
    }
  }
  let elem = source();
  let scriptsInserted = [];
  let scriptsRun = [];
  onMount(() => {
    findAndRunScripts();
  });
  var div = open($$anchor, true, frag19);
  bind_this(div, ($$value) => set(elem, $$value));
  var node = child(div);
  html(node, () => code(), false);
  class_name_effect(div, () => "builder-custom-code" + (get(replaceNodes) ? " replace-nodes" : ""));
  close($$anchor, div);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/custom-code/component-info.js
var componentInfo11 = {
  name: "Custom Code",
  static: true,
  requiredPermissions: ["editCode"],
  inputs: [{
    name: "code",
    type: "html",
    required: true,
    defaultValue: "<p>Hello there, I am custom HTML code!</p>",
    code: true
  }, {
    name: "replaceNodes",
    type: "boolean",
    helperText: "Preserve server rendered dom nodes",
    advanced: true
  }, {
    name: "scriptsClientOnly",
    type: "boolean",
    defaultValue: false,
    helperText: "Only print and run scripts on the client. Important when scripts influence DOM that could be replaced when client loads",
    advanced: true
  }]
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/constants/builder-registered-components.js
var getDefaultRegisteredComponents = () => [{
  component: Button,
  ...componentInfo
}, {
  component: Columns,
  ...componentInfo2
}, {
  component: Custom_code,
  ...componentInfo11
}, {
  component: Embed,
  ...componentInfo9
}, {
  component: Fragment,
  ...componentInfo3
}, {
  component: Image,
  ...componentInfo4
}, {
  component: Img,
  ...componentInfo10
}, {
  component: Section,
  ...componentInfo5
}, {
  component: Symbol2,
  ...componentInfo6
}, {
  component: Text,
  ...componentInfo7
}, {
  component: Video,
  ...componentInfo8
}];

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/register-component.js
var components = [];
var createRegisterComponentMessage = (info) => ({
  type: "builder.registerComponent",
  data: serializeComponentInfo(info)
});
var serializeFn = (fnValue) => {
  const fnStr = fnValue.toString().trim();
  const appendFunction = !fnStr.startsWith("function") && !fnStr.startsWith("(");
  return `return (${appendFunction ? "function " : ""}${fnStr}).apply(this, arguments)`;
};
var serializeValue = (value) => typeof value === "function" ? serializeFn(value) : fastClone(value);
var serializeComponentInfo = ({ inputs, ...info }) => ({
  ...fastClone(info),
  inputs: inputs == null ? void 0 : inputs.map((input) => Object.entries(input).reduce((acc, [key3, value]) => ({
    ...acc,
    [key3]: serializeValue(value)
  }), {}))
});

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/content/components/styles.helpers.js
var getCssFromFont = (font) => {
  var _a;
  const family = font.family + (font.kind && !font.kind.includes("#") ? ", " + font.kind : "");
  const name = family.split(",")[0];
  const url = font.fileUrl ?? ((_a = font == null ? void 0 : font.files) == null ? void 0 : _a.regular);
  let str = "";
  if (url && family && name) {
    str += `
@font-face {
font-family: "${family}";
src: local("${name}"), url('${url}') format('woff2');
font-display: fallback;
font-weight: 400;
}
      `.trim();
  }
  if (font.files) {
    for (const weight in font.files) {
      const isNumber = String(Number(weight)) === weight;
      if (!isNumber) {
        continue;
      }
      const weightUrl = font.files[weight];
      if (weightUrl && weightUrl !== url) {
        str += `
@font-face {
font-family: "${family}";
src: url('${weightUrl}') format('woff2');
font-display: fallback;
font-weight: ${weight};
}
        `.trim();
      }
    }
  }
  return str;
};
var getFontCss = ({ customFonts }) => {
  var _a;
  return ((_a = customFonts == null ? void 0 : customFonts.map((font) => getCssFromFont(font))) == null ? void 0 : _a.join(" ")) || "";
};
var getCss = ({ cssCode, contentId }) => {
  if (!cssCode) {
    return "";
  }
  if (!contentId) {
    return cssCode;
  }
  return (cssCode == null ? void 0 : cssCode.replace(/&/g, `div[builder-content-id="${contentId}"]`)) || "";
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/content/components/styles.svelte
var frag20 = template(`<!>`, true);
function Styles($$anchor, $$props) {
  if (new.target === Styles)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let cssCode = prop_source($$props, "cssCode", void 0, false);
  let contentId = prop_source($$props, "contentId", void 0, false);
  let customFonts = prop_source($$props, "customFonts", void 0, false);
  let injectedStyles = `
${getCss({
    cssCode: get(cssCode),
    contentId: get(contentId)
  })}
${getFontCss({ customFonts: get(customFonts) })}

.builder-text > p:first-of-type, .builder-text > .builder-paragraph:first-of-type {
  margin: 0;
}
.builder-text > p, .builder-text > .builder-paragraph {
  color: inherit;
  line-height: inherit;
  letter-spacing: inherit;
  font-weight: inherit;
  font-size: inherit;
  text-align: inherit;
  font-family: inherit;
}
`.trim();
  var fragment = open_frag($$anchor, true, frag20);
  var node = child_frag(fragment);
  validate_component(Inlined_styles)(node, { styles: injectedStyles });
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/content/content.helpers.js
var getContextStateInitialValue = ({ content, data, locale }) => {
  var _a, _b, _c;
  const defaultValues = {};
  (_b = (_a = content == null ? void 0 : content.data) == null ? void 0 : _a.inputs) == null ? void 0 : _b.forEach((input) => {
    var _a2;
    if (input.name && input.defaultValue !== void 0 && ((_a2 = content == null ? void 0 : content.data) == null ? void 0 : _a2.state) && content.data.state[input.name] === void 0) {
      defaultValues[input.name] = input.defaultValue;
    }
  });
  const stateToUse = {
    ...(_c = content == null ? void 0 : content.data) == null ? void 0 : _c.state,
    ...data,
    ...locale ? {
      locale
    } : {}
  };
  return {
    ...defaultValues,
    ...stateToUse
  };
};
var getContentInitialValue = ({ content, data }) => {
  return !content ? void 0 : {
    ...content,
    data: {
      ...content == null ? void 0 : content.data,
      ...data
    },
    meta: content == null ? void 0 : content.meta
  };
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-global-this.js
function getGlobalThis() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  return globalThis;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-fetch.js
function getFetch() {
  const globalFetch = getGlobalThis().fetch;
  if (typeof globalFetch === "undefined") {
    console.warn(`Builder SDK could not find a global fetch function. Make sure you have a polyfill for fetch in your project. 
      For more information, read https://github.com/BuilderIO/this-package-uses-fetch`);
    throw new Error("Builder SDK could not find a global `fetch` function");
  }
  return globalFetch;
}
var fetch2 = getFetch();

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/url.js
var getTopLevelDomain = (host) => {
  if (host === "localhost" || host === "127.0.0.1") {
    return host;
  }
  const parts = host.split(".");
  if (parts.length > 2) {
    return parts.slice(1).join(".");
  }
  return host;
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/cookie.js
var getCookieSync = ({ name, canTrack }) => {
  var _a;
  try {
    if (!canTrack) {
      return void 0;
    }
    return (_a = document.cookie.split("; ").find((row) => row.startsWith(`${name}=`))) == null ? void 0 : _a.split("=")[1];
  } catch (err) {
    logger.warn("[COOKIE] GET error: ", (err == null ? void 0 : err.message) || err);
    return void 0;
  }
};
var getCookie = async (args) => getCookieSync(args);
var stringifyCookie = (cookie) => cookie.map(([key3, value]) => value ? `${key3}=${value}` : key3).filter(checkIsDefined).join("; ");
var SECURE_CONFIG = [["secure", ""], ["SameSite", "None"]];
var createCookieString = ({ name, value, expires }) => {
  const secure = isBrowser() ? location.protocol === "https:" : true;
  const secureObj = secure ? SECURE_CONFIG : [[]];
  const expiresObj = expires ? [["expires", expires.toUTCString()]] : [[]];
  const cookieValue = [[name, value], ...expiresObj, ["path", "/"], ["domain", getTopLevelDomain(window.location.hostname)], ...secureObj];
  const cookie = stringifyCookie(cookieValue);
  return cookie;
};
var setCookie = async ({ name, value, expires, canTrack }) => {
  try {
    if (!canTrack) {
      return;
    }
    const cookie = createCookieString({
      name,
      value,
      expires
    });
    document.cookie = cookie;
  } catch (err) {
    logger.warn("[COOKIE] SET error: ", (err == null ? void 0 : err.message) || err);
  }
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/uuid.js
function uuidv4() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
function uuid() {
  return uuidv4().replace(/-/g, "");
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/sessionId.js
var SESSION_LOCAL_STORAGE_KEY = "builderSessionId";
var getSessionId = async ({ canTrack }) => {
  if (!canTrack) {
    return void 0;
  }
  const sessionId = await getCookie({
    name: SESSION_LOCAL_STORAGE_KEY,
    canTrack
  });
  if (checkIsDefined(sessionId)) {
    return sessionId;
  } else {
    const newSessionId = createSessionId();
    setSessionId({
      id: newSessionId,
      canTrack
    });
    return newSessionId;
  }
};
var createSessionId = () => uuid();
var setSessionId = ({ id, canTrack }) => setCookie({
  name: SESSION_LOCAL_STORAGE_KEY,
  value: id,
  canTrack
});

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/localStorage.js
var getLocalStorage = () => isBrowser() && typeof localStorage !== "undefined" ? localStorage : void 0;
var getLocalStorageItem = ({ key: key3, canTrack }) => {
  var _a;
  try {
    if (canTrack) {
      return (_a = getLocalStorage()) == null ? void 0 : _a.getItem(key3);
    }
    return void 0;
  } catch (err) {
    console.debug("[LocalStorage] GET error: ", err);
    return void 0;
  }
};
var setLocalStorageItem = ({ key: key3, canTrack, value }) => {
  var _a;
  try {
    if (canTrack) {
      (_a = getLocalStorage()) == null ? void 0 : _a.setItem(key3, value);
    }
  } catch (err) {
    console.debug("[LocalStorage] SET error: ", err);
  }
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/visitorId.js
var VISITOR_LOCAL_STORAGE_KEY = "builderVisitorId";
var getVisitorId = ({ canTrack }) => {
  if (!canTrack) {
    return void 0;
  }
  const visitorId = getLocalStorageItem({
    key: VISITOR_LOCAL_STORAGE_KEY,
    canTrack
  });
  if (checkIsDefined(visitorId)) {
    return visitorId;
  } else {
    const newVisitorId = createVisitorId();
    setVisitorId({
      id: newVisitorId,
      canTrack
    });
    return newVisitorId;
  }
};
var createVisitorId = () => uuid();
var setVisitorId = ({ id, canTrack }) => setLocalStorageItem({
  key: VISITOR_LOCAL_STORAGE_KEY,
  value: id,
  canTrack
});

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/track/index.js
var getTrackingEventData = async ({ canTrack }) => {
  if (!canTrack) {
    return {
      visitorId: void 0,
      sessionId: void 0
    };
  }
  const sessionId = await getSessionId({
    canTrack
  });
  const visitorId = getVisitorId({
    canTrack
  });
  return {
    sessionId,
    visitorId
  };
};
var createEvent = async ({ type: eventType, canTrack, apiKey, metadata, ...properties }) => ({
  type: eventType,
  data: {
    ...properties,
    metadata: {
      url: location.href,
      ...metadata
    },
    ...await getTrackingEventData({
      canTrack
    }),
    userAttributes: getUserAttributes(),
    ownerId: apiKey
  }
});
async function _track(eventProps) {
  if (!eventProps.apiKey) {
    logger.error("Missing API key for track call. Please provide your API key.");
    return;
  }
  if (!eventProps.canTrack) {
    return;
  }
  if (isEditing()) {
    return;
  }
  if (!(isBrowser() || TARGET === "reactNative")) {
    return;
  }
  return fetch(`https://cdn.builder.io/api/v1/track`, {
    method: "POST",
    body: JSON.stringify({
      events: [await createEvent(eventProps)]
    }),
    headers: {
      "content-type": "application/json"
    },
    mode: "cors"
  }).catch((err) => {
    console.error("Failed to track: ", err);
  });
}
var track = (args) => _track({
  ...args,
  canTrack: true
});

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/constants/sdk-version.js
var SDK_VERSION = "0.7.0";

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/register.js
var registry = {};
function register(type, info) {
  let typeList = registry[type];
  if (!typeList) {
    typeList = registry[type] = [];
  }
  typeList.push(info);
  if (isBrowser()) {
    const message = {
      type: "builder.register",
      data: {
        type,
        info
      }
    };
    try {
      parent.postMessage(message, "*");
      if (parent !== window) {
        window.postMessage(message, "*");
      }
    } catch (err) {
      console.debug("Could not postmessage", err);
    }
  }
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/scripts/init-editing.js
var registerInsertMenu = () => {
  register("insertMenu", {
    name: "_default",
    default: true,
    items: [{
      name: "Box"
    }, {
      name: "Text"
    }, {
      name: "Image"
    }, {
      name: "Columns"
    }, ...TARGET === "reactNative" ? [] : [{
      name: "Core:Section"
    }, {
      name: "Core:Button"
    }, {
      name: "Embed"
    }, {
      name: "Custom Code"
    }]]
  });
};
var isSetupForEditing = false;
var setupBrowserForEditing = (options = {}) => {
  var _a, _b;
  if (isSetupForEditing) {
    return;
  }
  isSetupForEditing = true;
  if (isBrowser()) {
    (_a = window.parent) == null ? void 0 : _a.postMessage({
      type: "builder.sdkInfo",
      data: {
        target: TARGET,
        version: SDK_VERSION,
        supportsPatchUpdates: false,
        // Supports builder-model="..." attribute which is needed to
        // scope our '+ add block' button styling
        supportsAddBlockScoping: true,
        supportsCustomBreakpoints: true
      }
    }, "*");
    (_b = window.parent) == null ? void 0 : _b.postMessage({
      type: "builder.updateContent",
      data: {
        options
      }
    }, "*");
    window.addEventListener("message", ({ data }) => {
      var _a2, _b2;
      if (!(data == null ? void 0 : data.type)) {
        return;
      }
      switch (data.type) {
        case "builder.evaluate": {
          const text2 = data.data.text;
          const args = data.data.arguments || [];
          const id = data.data.id;
          const fn = new Function(text2);
          let result;
          let error = null;
          try {
            result = fn.apply(null, args);
          } catch (err) {
            error = err;
          }
          if (error) {
            (_a2 = window.parent) == null ? void 0 : _a2.postMessage({
              type: "builder.evaluateError",
              data: {
                id,
                error: error.message
              }
            }, "*");
          } else {
            if (result && typeof result.then === "function") {
              result.then((finalResult) => {
                var _a3;
                (_a3 = window.parent) == null ? void 0 : _a3.postMessage({
                  type: "builder.evaluateResult",
                  data: {
                    id,
                    result: finalResult
                  }
                }, "*");
              }).catch(console.error);
            } else {
              (_b2 = window.parent) == null ? void 0 : _b2.postMessage({
                type: "builder.evaluateResult",
                data: {
                  result,
                  id
                }
              }, "*");
            }
          }
          break;
        }
      }
    });
  }
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/track/interaction.js
function round(num) {
  return Math.round(num * 1e3) / 1e3;
}
var findParentElement = (target, callback, checkElement = true) => {
  if (!(target instanceof HTMLElement)) {
    return null;
  }
  let parent2 = checkElement ? target : target.parentElement;
  do {
    if (!parent2) {
      return null;
    }
    const matches = callback(parent2);
    if (matches) {
      return parent2;
    }
  } while (parent2 = parent2.parentElement);
  return null;
};
var findBuilderParent = (target) => findParentElement(target, (el) => {
  const id = el.getAttribute("builder-id") || el.id;
  return Boolean((id == null ? void 0 : id.indexOf("builder-")) === 0);
});
var computeOffset = ({ event: event2, target }) => {
  const targetRect = target.getBoundingClientRect();
  const xOffset = event2.clientX - targetRect.left;
  const yOffset = event2.clientY - targetRect.top;
  const xRatio = round(xOffset / targetRect.width);
  const yRatio = round(yOffset / targetRect.height);
  return {
    x: xRatio,
    y: yRatio
  };
};
var getInteractionPropertiesForEvent = (event2) => {
  const target = event2.target;
  const targetBuilderElement = target && findBuilderParent(target);
  const builderId = (targetBuilderElement == null ? void 0 : targetBuilderElement.getAttribute("builder-id")) || (targetBuilderElement == null ? void 0 : targetBuilderElement.id);
  return {
    targetBuilderElement: builderId || void 0,
    metadata: {
      targetOffset: target ? computeOffset({
        event: event2,
        target
      }) : void 0,
      builderTargetOffset: targetBuilderElement ? computeOffset({
        event: event2,
        target: targetBuilderElement
      }) : void 0,
      builderElementIndex: targetBuilderElement && builderId ? [].slice.call(document.getElementsByClassName(builderId)).indexOf(targetBuilderElement) : void 0
    }
  };
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/ab-tests.js
var BUILDER_STORE_PREFIX = "builder.tests";
var getContentTestKey = (id) => `${BUILDER_STORE_PREFIX}.${id}`;
var getContentVariationCookie = ({ contentId }) => getCookie({
  name: getContentTestKey(contentId),
  canTrack: true
});
var getContentVariationCookieSync = ({ contentId }) => getCookieSync({
  name: getContentTestKey(contentId),
  canTrack: true
});
var setContentVariationCookie = ({ contentId, value }) => setCookie({
  name: getContentTestKey(contentId),
  value,
  canTrack: true
});
var checkIsBuilderContentWithVariations = (item) => checkIsDefined(item.id) && checkIsDefined(item.variations) && Object.keys(item.variations).length > 0;
var getRandomVariationId = ({ id, variations }) => {
  var _a;
  let n = 0;
  const random = Math.random();
  for (const id2 in variations) {
    const testRatio = (_a = variations[id2]) == null ? void 0 : _a.testRatio;
    n += testRatio;
    if (random < n) {
      return id2;
    }
  }
  return id;
};
var getAndSetVariantId = (args) => {
  const randomVariationId = getRandomVariationId(args);
  setContentVariationCookie({
    contentId: args.id,
    value: randomVariationId
  }).catch((err) => {
    logger.error("could not store A/B test variation: ", err);
  });
  return randomVariationId;
};
var getTestFields = ({ item, testGroupId }) => {
  const variationValue = item.variations[testGroupId];
  if (testGroupId === item.id || // handle edge-case where `testGroupId` points to non-existing variation
  !variationValue) {
    return {
      testVariationId: item.id,
      testVariationName: "Default"
    };
  } else {
    return {
      data: variationValue.data,
      testVariationId: variationValue.id,
      testVariationName: variationValue.name || (variationValue.id === item.id ? "Default" : "")
    };
  }
};
var handleABTestingSync = ({ item, canTrack }) => {
  if (TARGET === "reactNative")
    return item;
  if (!canTrack) {
    return item;
  }
  if (!item) {
    return void 0;
  }
  if (!checkIsBuilderContentWithVariations(item)) {
    return item;
  }
  const testGroupId = getContentVariationCookieSync({
    contentId: item.id
  }) || getAndSetVariantId({
    variations: item.variations,
    id: item.id
  });
  const variationValue = getTestFields({
    item,
    testGroupId
  });
  return {
    ...item,
    ...variationValue
  };
};
var handleABTesting = async ({ item, canTrack }) => {
  if (!canTrack) {
    return item;
  }
  if (!checkIsBuilderContentWithVariations(item)) {
    return item;
  }
  const cookieValue = await getContentVariationCookie({
    contentId: item.id
  });
  const testGroupId = cookieValue || getAndSetVariantId({
    variations: item.variations,
    id: item.id
  });
  const variationValue = getTestFields({
    item,
    testGroupId
  });
  return {
    ...item,
    ...variationValue
  };
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/canTrack.js
var getDefaultCanTrack = (canTrack) => checkIsDefined(canTrack) ? canTrack : true;

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/preview-lru-cache/get.js
function getPreviewContent(_searchParams) {
  return void 0;
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/helpers/flatten.js
function flatten(object, path = null, separator = ".") {
  return Object.keys(object).reduce((acc, key3) => {
    const value = object[key3];
    const newPath = [path, key3].filter(Boolean).join(separator);
    const isObject = [typeof value === "object", value !== null, !(Array.isArray(value) && value.length === 0)].every(Boolean);
    return isObject ? {
      ...acc,
      ...flatten(value, newPath, separator)
    } : {
      ...acc,
      [newPath]: value
    };
  }, {});
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-builder-search-params/index.js
var BUILDER_SEARCHPARAMS_PREFIX = "builder.";
var BUILDER_OPTIONS_PREFIX = "options.";
var convertSearchParamsToQueryObject = (searchParams) => {
  const options = {};
  searchParams.forEach((value, key3) => {
    options[key3] = value;
  });
  return options;
};
var getBuilderSearchParams = (_options) => {
  if (!_options) {
    return {};
  }
  const options = normalizeSearchParams(_options);
  const newOptions = {};
  Object.keys(options).forEach((key3) => {
    if (key3.startsWith(BUILDER_SEARCHPARAMS_PREFIX)) {
      const trimmedKey = key3.replace(BUILDER_SEARCHPARAMS_PREFIX, "").replace(BUILDER_OPTIONS_PREFIX, "");
      newOptions[trimmedKey] = options[key3];
    }
  });
  return newOptions;
};
var getBuilderSearchParamsFromWindow = () => {
  if (!isBrowser()) {
    return {};
  }
  const searchParams = new URLSearchParams(window.location.search);
  return getBuilderSearchParams(searchParams);
};
var normalizeSearchParams = (searchParams) => searchParams instanceof URLSearchParams ? convertSearchParamsToQueryObject(searchParams) : searchParams;

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/types/api-version.js
var DEFAULT_API_VERSION = "v3";

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-content/generate-content-url.js
var generateContentUrl = (options) => {
  let { noTraverse = false } = options;
  const { limit = 30, userAttributes, query, model, apiKey, includeRefs = true, enrich, locale, apiVersion = DEFAULT_API_VERSION } = options;
  if (!apiKey) {
    throw new Error("Missing API key");
  }
  if (!["v2", "v3"].includes(apiVersion)) {
    throw new Error(`Invalid apiVersion: expected 'v2' or 'v3', received '${apiVersion}'`);
  }
  if ((options.limit === void 0 || options.limit > 1) && !("noTraverse" in options)) {
    noTraverse = true;
  }
  const url = new URL(`https://cdn.builder.io/api/${apiVersion}/content/${model}?apiKey=${apiKey}&limit=${limit}&noTraverse=${noTraverse}&includeRefs=${includeRefs}${locale ? `&locale=${locale}` : ""}${enrich ? `&enrich=${enrich}` : ""}`);
  const queryOptions = {
    ...getBuilderSearchParamsFromWindow(),
    ...normalizeSearchParams(options.options || {})
  };
  const flattened = flatten(queryOptions);
  for (const key3 in flattened) {
    url.searchParams.set(key3, String(flattened[key3]));
  }
  if (userAttributes) {
    url.searchParams.set("userAttributes", JSON.stringify(userAttributes));
  }
  if (query) {
    const flattened2 = flatten({
      query
    });
    for (const key3 in flattened2) {
      url.searchParams.set(key3, JSON.stringify(flattened2[key3]));
    }
  }
  return url;
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/get-content/index.js
var checkContentHasResults = (content) => "results" in content;
async function fetchOneEntry(options) {
  const allContent = await fetchEntries({
    ...options,
    limit: 1
  });
  if (allContent) {
    return allContent.results[0] || null;
  }
  return null;
}
var getContent = fetchOneEntry;
var _fetchContent = async (options) => {
  const url = generateContentUrl(options);
  const res = await fetch2(url.href);
  const content = await res.json();
  return content;
};
var _processContentResult = async (options, content, url = generateContentUrl(options)) => {
  const canTrack = getDefaultCanTrack(options.canTrack);
  const isPreviewing2 = url.search.includes(`preview=`);
  if (TARGET === "rsc" && isPreviewing2) {
    const newResults = [];
    for (const item of content.results) {
      const previewContent = getPreviewContent(url.searchParams);
      newResults.push(previewContent || item);
    }
    content.results = newResults;
  }
  if (!canTrack)
    return content;
  if (!(isBrowser() || TARGET === "reactNative"))
    return content;
  try {
    const newResults = [];
    for (const item of content.results) {
      newResults.push(await handleABTesting({
        item,
        canTrack
      }));
    }
    content.results = newResults;
  } catch (e) {
    logger.error("Could not process A/B tests. ", e);
  }
  return content;
};
async function fetchEntries(options) {
  try {
    const url = generateContentUrl(options);
    const content = await _fetchContent(options);
    if (!checkContentHasResults(content)) {
      logger.error("Error fetching data. ", {
        url,
        content,
        options
      });
      return null;
    }
    return _processContentResult(options, content);
  } catch (error) {
    logger.error("Error fetching data. ", error);
    return null;
  }
}
var getAllContent = fetchEntries;

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/is-previewing.js
function isPreviewing() {
  if (!isBrowser()) {
    return false;
  }
  if (isEditing()) {
    return false;
  }
  return Boolean(location.search.indexOf("builder.preview=") !== -1);
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/content/components/enable-editor.svelte
var frag_19 = template(`<div><!></div>`);
var frag21 = template(`<!>`, true);
function Enable_editor($$anchor, $$props) {
  if (new.target === Enable_editor)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $builderContextSignal = () => (validate_store(builderContextSignal(), "builderContextSignal"), store_get(builderContextSignal(), "$builderContextSignal", $$subscriptions));
  let builderContextSignal = prop($$props, "builderContextSignal");
  let model = prop_source($$props, "model", void 0, false);
  let context = prop_source($$props, "context", void 0, false);
  let canTrack = prop_source($$props, "canTrack", void 0, false);
  let apiKey = prop($$props, "apiKey");
  let showContent = prop($$props, "showContent");
  let classNameProp = prop($$props, "classNameProp");
  let content = prop_source($$props, "content", void 0, false);
  let locale = prop_source($$props, "locale", void 0, false);
  let includeRefs = prop_source($$props, "includeRefs", void 0, false);
  let enrich = prop_source($$props, "enrich", void 0, false);
  function mergeNewContent(newContent) {
    var _a, _b, _c, _d, _e;
    const newContentValue = {
      ...$builderContextSignal().content,
      ...newContent,
      data: {
        ...(_a = $builderContextSignal().content) == null ? void 0 : _a.data,
        ...newContent == null ? void 0 : newContent.data
      },
      meta: {
        ...(_b = $builderContextSignal().content) == null ? void 0 : _b.meta,
        ...newContent == null ? void 0 : newContent.meta,
        breakpoints: ((_c = newContent == null ? void 0 : newContent.meta) == null ? void 0 : _c.breakpoints) || ((_e = (_d = $builderContextSignal().content) == null ? void 0 : _d.meta) == null ? void 0 : _e.breakpoints)
      }
    };
    mutate_store(builderContextSignal(), $builderContextSignal().content = newContentValue, $builderContextSignal());
  }
  function processMessage(event2) {
    var _a;
    const { data } = event2;
    if (data) {
      switch (data.type) {
        case "builder.configureSdk": {
          const messageContent = data.data;
          const { breakpoints, contentId } = messageContent;
          if (!contentId || contentId !== ((_a = $builderContextSignal().content) == null ? void 0 : _a.id)) {
            return;
          }
          if (breakpoints) {
            mergeNewContent({ meta: { breakpoints } });
          }
          set(forceReRenderCount, get(forceReRenderCount) + 1);
          break;
        }
        case "builder.contentUpdate": {
          const messageContent = data.data;
          const key3 = messageContent.key || messageContent.alias || messageContent.entry || messageContent.modelName;
          const contentData = messageContent.data;
          if (key3 === get(model)) {
            mergeNewContent(contentData);
            set(forceReRenderCount, get(forceReRenderCount) + 1);
          }
          break;
        }
      }
    }
  }
  function evaluateJsCode() {
    var _a, _b;
    const jsCode = (_b = (_a = $builderContextSignal().content) == null ? void 0 : _a.data) == null ? void 0 : _b.jsCode;
    if (jsCode) {
      evaluate({
        code: jsCode,
        context: get(context) || {},
        localState: void 0,
        rootState: $builderContextSignal().rootState,
        rootSetState: $builderContextSignal().rootSetState
      });
    }
  }
  function onClick(event2) {
    var _a, _b;
    if ($builderContextSignal().content) {
      const variationId = (_a = $builderContextSignal().content) == null ? void 0 : _a.testVariationId;
      const contentId = (_b = $builderContextSignal().content) == null ? void 0 : _b.id;
      _track({
        type: "click",
        canTrack: getDefaultCanTrack(get(canTrack)),
        contentId,
        apiKey: apiKey(),
        variationId: variationId !== contentId ? variationId : void 0,
        ...getInteractionPropertiesForEvent(event2),
        unique: !clicked
      });
    }
    if (!clicked) {
      clicked = true;
    }
  }
  function evalExpression(expression) {
    return expression.replace(/{{([^}]+)}}/g, (_match, group) => evaluate({
      code: group,
      context: get(context) || {},
      localState: void 0,
      rootState: $builderContextSignal().rootState,
      rootSetState: $builderContextSignal().rootSetState
    }));
  }
  function handleRequest({ url, key: key3 }) {
    fetch2(url).then((response) => response.json()).then((json) => {
      var _a, _b;
      const newState = {
        ...$builderContextSignal().rootState,
        [key3]: json
      };
      (_b = (_a = $builderContextSignal()).rootSetState) == null ? void 0 : _b.call(_a, newState);
      httpReqsData[key3] = true;
    }).catch((err) => {
      console.error("error fetching dynamic data", url, err);
    });
  }
  function runHttpRequests() {
    var _a, _b;
    const requests = ((_b = (_a = $builderContextSignal().content) == null ? void 0 : _a.data) == null ? void 0 : _b.httpRequests) ?? {};
    Object.entries(requests).forEach(([key3, url]) => {
      if (url && (!httpReqsData[key3] || isEditing())) {
        const evaluatedUrl = evalExpression(url);
        handleRequest({ url: evaluatedUrl, key: key3 });
      }
    });
  }
  function emitStateUpdate() {
    if (isEditing()) {
      window.dispatchEvent(new CustomEvent(
        "builder:component:stateChange",
        {
          detail: {
            state: fastClone($builderContextSignal().rootState),
            ref: { name: get(model) }
          }
        }
      ));
    }
  }
  let elementRef = source();
  let forceReRenderCount = source(0);
  let lastUpdated = 0;
  let shouldSendResetCookie = false;
  let httpReqsData = {};
  let clicked = false;
  onMount(() => {
    var _a, _b;
    if (!apiKey()) {
      logger.error("No API key provided to `RenderContent` component. This can cause issues. Please provide an API key using the `apiKey` prop.");
    }
    if (isBrowser()) {
      if (isEditing()) {
        set(forceReRenderCount, get(forceReRenderCount) + 1);
        window.addEventListener("message", processMessage);
        registerInsertMenu();
        setupBrowserForEditing({
          ...get(locale) ? { locale: get(locale) } : {},
          ...get(includeRefs) ? { includeRefs: get(includeRefs) } : {},
          ...get(enrich) ? { enrich: get(enrich) } : {}
        });
        Object.values($builderContextSignal().componentInfos).forEach((registeredComponent) => {
          var _a2;
          const message = createRegisterComponentMessage(registeredComponent);
          (_a2 = window.parent) == null ? void 0 : _a2.postMessage(message, "*");
        });
        window.addEventListener("builder:component:stateChangeListenerActivated", emitStateUpdate);
      }
      if ($builderContextSignal().content) {
        const variationId = (_a = $builderContextSignal().content) == null ? void 0 : _a.testVariationId;
        const contentId = (_b = $builderContextSignal().content) == null ? void 0 : _b.id;
        _track({
          type: "impression",
          canTrack: getDefaultCanTrack(get(canTrack)),
          contentId,
          apiKey: apiKey(),
          variationId: variationId !== contentId ? variationId : void 0
        });
      }
      if (isPreviewing()) {
        const searchParams = new URL(location.href).searchParams;
        const searchParamPreviewModel = searchParams.get("builder.preview");
        const searchParamPreviewId = searchParams.get(`builder.preview.${searchParamPreviewModel}`);
        const previewApiKey = searchParams.get("apiKey") || searchParams.get("builder.space");
        if (searchParamPreviewModel === get(model) && previewApiKey === apiKey() && (!get(content) || searchParamPreviewId === get(content).id)) {
          fetchOneEntry({
            model: get(model),
            apiKey: apiKey(),
            apiVersion: $builderContextSignal().apiVersion
          }).then((content2) => {
            if (content2) {
              mergeNewContent(content2);
            }
          });
        }
      }
      evaluateJsCode();
      runHttpRequests();
      emitStateUpdate();
    }
  });
  function onUpdateFn_0(..._args) {
    if (get(content)) {
      mergeNewContent(get(content));
    }
  }
  function onUpdateFn_1(..._args) {
  }
  function onUpdateFn_2(..._args) {
    evaluateJsCode();
  }
  function onUpdateFn_3(..._args) {
    runHttpRequests();
  }
  function onUpdateFn_4(..._args) {
    emitStateUpdate();
  }
  setContext(builder_context_default.key, builderContextSignal());
  onDestroy(() => {
    if (isBrowser()) {
      window.removeEventListener("message", processMessage);
      window.removeEventListener("builder:component:stateChangeListenerActivated", emitStateUpdate);
    }
  });
  pre_effect(() => {
    get(content);
    untrack(() => {
      onUpdateFn_0(...[get(content)]);
    });
  });
  pre_effect(() => {
    untrack(() => {
      onUpdateFn_1(...[shouldSendResetCookie]);
    });
  });
  pre_effect(() => {
    $builderContextSignal();
    untrack(() => {
      var _a, _b;
      onUpdateFn_2(...[
        (_b = (_a = $builderContextSignal().content) == null ? void 0 : _a.data) == null ? void 0 : _b.jsCode,
        $builderContextSignal().rootState
      ]);
    });
  });
  pre_effect(() => {
    $builderContextSignal();
    untrack(() => {
      var _a, _b;
      onUpdateFn_3(...[(_b = (_a = $builderContextSignal().content) == null ? void 0 : _a.data) == null ? void 0 : _b.httpRequests]);
    });
  });
  pre_effect(() => {
    $builderContextSignal();
    untrack(() => {
      onUpdateFn_4(...[$builderContextSignal().rootState]);
    });
  });
  var fragment = open_frag($$anchor, true, frag21);
  var node = child_frag(fragment);
  if_block(
    node,
    () => $builderContextSignal().content,
    ($$anchor2) => {
      var div = open($$anchor2, true, frag_19);
      bind_this(div, ($$value) => set(elementRef, $$value));
      let spread_attributes2;
      var node_1 = child(div);
      slot(node_1, unwrap($$props).children, {}, null);
      render_effect(() => {
        var _a;
        spread_attributes2 = spread_attributes(
          div,
          spread_attributes2,
          [
            { key: get(forceReRenderCount) },
            {
              "builder-content-id": (_a = $builderContextSignal().content) == null ? void 0 : _a.id
            },
            { "builder-model": get(model) },
            {},
            showContent() ? {} : { hidden: true, "aria-hidden": true },
            { class: classNameProp() }
          ],
          ""
        );
      });
      event(
        "click",
        div,
        (event2) => {
          onClick(event2);
        },
        false
      );
      close($$anchor2, div);
    },
    null
  );
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/inlined-script.svelte
var dynamic_element2 = template(`<!>`, true);
var frag22 = template(`<!>`, true);
function Inlined_script($$anchor, $$props) {
  if (new.target === Inlined_script)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  let scriptStr = prop($$props, "scriptStr");
  let id = prop_source($$props, "id", void 0, false);
  var fragment = open_frag($$anchor, true, frag22);
  var node = child_frag(fragment);
  validate_void_dynamic_element(() => "script");
  validate_dynamic_element_tag(() => "script");
  element(node, () => "script", ($$element, $$anchor2) => {
    let spread_attributes2;
    render_effect(() => {
      spread_attributes2 = spread_dynamic_element_attributes($$element, spread_attributes2, [{ id: get(id) }], "");
    });
    var fragment_1 = open_frag($$anchor2, true, dynamic_element2);
    var node_1 = child_frag(fragment_1);
    html(node_1, () => scriptStr(), false);
    close_frag($$anchor2, fragment_1);
  });
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/content/content.svelte
var frag_110 = template(`<!>`, true);
var frag_26 = template(`<!>`, true);
var EnableEditor_default = template(`<!> <!> <!>`, true);
var frag23 = template(`<!>`, true);
function Content($$anchor, $$props) {
  var _a, _b;
  if (new.target === Content)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $builderContextSignal = () => (validate_store(builderContextSignal, "builderContextSignal"), store_get(builderContextSignal, "$builderContextSignal", $$subscriptions));
  let content = prop_source($$props, "content", void 0, false);
  let customComponents = prop_source($$props, "customComponents", void 0, false);
  let data = prop_source($$props, "data", void 0, false);
  let locale = prop_source($$props, "locale", void 0, false);
  let context = prop_source($$props, "context", void 0, false);
  let apiKey = prop($$props, "apiKey");
  let apiVersion = prop_source($$props, "apiVersion", void 0, false);
  let model = prop_source($$props, "model", void 0, false);
  let canTrack = prop_source($$props, "canTrack", void 0, false);
  let includeRefs = prop_source($$props, "includeRefs", void 0, false);
  let enrich = prop_source($$props, "enrich", void 0, false);
  let classNameProp = prop($$props, "classNameProp");
  let showContent = prop($$props, "showContent");
  let isSsrAbTest = prop($$props, "isSsrAbTest");
  function contentSetState(newRootState) {
    mutate_store(builderContextSignal, $builderContextSignal().rootState = newRootState, $builderContextSignal());
  }
  let scriptStr = getRenderContentScriptString({
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
    variationId: (_a = get(content)) == null ? void 0 : _a.testVariationId,
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain
    contentId: (_b = get(content)) == null ? void 0 : _b.id
  });
  let registeredComponents = [
    ...getDefaultRegisteredComponents(),
    // While this `components` object is deprecated, we must maintain support for it.
    // Since users are able to override our default components, we need to make sure that we do not break such
    // existing usage.
    // This is why we spread `components` after the default Builder.io components, but before the `props.customComponents`,
    // which is the new standard way of providing custom components, and must therefore take precedence.
    ...components,
    ...get(customComponents) || []
  ].reduce(
    (acc, { component: component2, ...info }) => ({
      ...acc,
      [info.name]: {
        component: component2,
        ...serializeComponentInfo(info)
      }
    }),
    {}
  );
  let builderContextSignal = writable({
    content: getContentInitialValue({
      content: get(content),
      data: get(data)
    }),
    localState: void 0,
    rootState: getContextStateInitialValue({
      content: get(content),
      data: get(data),
      locale: get(locale)
    }),
    rootSetState: contentSetState,
    context: get(context) || {},
    apiKey: apiKey(),
    apiVersion: get(apiVersion),
    componentInfos: [
      ...getDefaultRegisteredComponents(),
      // While this `components` object is deprecated, we must maintain support for it.
      // Since users are able to override our default components, we need to make sure that we do not break such
      // existing usage.
      // This is why we spread `components` after the default Builder.io components, but before the `props.customComponents`,
      // which is the new standard way of providing custom components, and must therefore take precedence.
      ...components,
      ...get(customComponents) || []
    ].reduce(
      (acc, { component: _, ...info }) => ({
        ...acc,
        [info.name]: serializeComponentInfo(info)
      }),
      {}
    ),
    inheritedStyles: {}
  });
  setContext(components_context_default.key, { registeredComponents });
  var fragment = open_frag($$anchor, true, frag23);
  var node = child_frag(fragment);
  validate_component(Enable_editor)(node, spread_props(() => [
    {
      get content() {
        return get(content);
      },
      get model() {
        return get(model);
      },
      get context() {
        return get(context);
      },
      get apiKey() {
        return apiKey();
      },
      get canTrack() {
        return get(canTrack);
      },
      get locale() {
        return get(locale);
      },
      get includeRefs() {
        return get(includeRefs);
      },
      get enrich() {
        return get(enrich);
      },
      get classNameProp() {
        return classNameProp();
      },
      get showContent() {
        return showContent();
      },
      builderContextSignal
    },
    {},
    {
      children: add_snippet_symbol(($$anchor2, $$slotProps) => {
        var fragment_1 = open_frag($$anchor2, true, EnableEditor_default);
        var node_1 = child_frag(fragment_1);
        var node_3 = sibling(sibling(node_1));
        var node_5 = sibling(sibling(node_3));
        if_block(
          node_1,
          () => isSsrAbTest(),
          ($$anchor3) => {
            var fragment_2 = open_frag($$anchor3, true, frag_110);
            var node_2 = child_frag(fragment_2);
            validate_component(Inlined_script)(node_2, { scriptStr });
            close_frag($$anchor3, fragment_2);
          },
          null
        );
        if_block(
          node_3,
          () => TARGET !== "reactNative",
          ($$anchor3) => {
            var fragment_3 = open_frag($$anchor3, true, frag_26);
            var node_4 = child_frag(fragment_3);
            validate_component(Styles)(node_4, {
              get contentId() {
                var _a2;
                return (_a2 = $builderContextSignal().content) == null ? void 0 : _a2.id;
              },
              get cssCode() {
                var _a2, _b2;
                return (_b2 = (_a2 = $builderContextSignal().content) == null ? void 0 : _a2.data) == null ? void 0 : _b2.cssCode;
              },
              get customFonts() {
                var _a2, _b2;
                return (_b2 = (_a2 = $builderContextSignal().content) == null ? void 0 : _a2.data) == null ? void 0 : _b2.customFonts;
              }
            });
            close_frag($$anchor3, fragment_3);
          },
          null
        );
        validate_component(Blocks)(node_5, {
          get blocks() {
            var _a2, _b2;
            return (_b2 = (_a2 = $builderContextSignal().content) == null ? void 0 : _a2.data) == null ? void 0 : _b2.blocks;
          },
          context: builderContextSignal,
          registeredComponents
        });
        close_frag($$anchor2, fragment_1);
      })
    }
  ]));
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/components/content-variants/content-variants.svelte
var frag_111 = template(`<!>`, true);
var each_block5 = template(`<!>`, true);
var frag_27 = template(`<!> <!> <!>`, true);
var frag24 = template(`<!> <!> <!>`, true);
function Content_variants($$anchor, $$props) {
  if (new.target === Content_variants)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const variantScriptStr = source();
  const hideVariantsStyleString = source();
  const defaultContent = source();
  let canTrack = prop_source($$props, "canTrack", void 0, false);
  let content = prop_source($$props, "content", void 0, false);
  let __isNestedRender = prop_source($$props, "__isNestedRender", void 0, false);
  let model = prop_source($$props, "model", void 0, false);
  let data = prop_source($$props, "data", void 0, false);
  let context = prop_source($$props, "context", void 0, false);
  let apiKey = prop($$props, "apiKey");
  let apiVersion = prop_source($$props, "apiVersion", void 0, false);
  let customComponents = prop_source($$props, "customComponents", void 0, false);
  let locale = prop_source($$props, "locale", void 0, false);
  let includeRefs = prop_source($$props, "includeRefs", void 0, false);
  let enrich = prop_source($$props, "enrich", void 0, false);
  let shouldRenderVariants = checkShouldRunVariants({
    canTrack: getDefaultCanTrack(get(canTrack)),
    content: get(content)
  });
  onMount(() => {
  });
  pre_effect(() => {
    get(content);
    untrack(() => {
      set(variantScriptStr, () => {
        var _a;
        return getVariantsScriptString(
          getVariants(get(content)).map((value) => ({
            id: value.testVariationId,
            testRatio: value.testRatio
          })),
          ((_a = get(content)) == null ? void 0 : _a.id) || ""
        );
      });
    });
  });
  pre_effect(() => {
    get(content);
    untrack(() => {
      set(hideVariantsStyleString, () => {
        return getVariants(get(content)).map((value) => `.variant-${value.testVariationId} { display: none; } `).join("");
      });
    });
  });
  pre_effect(() => {
    get(content), get(canTrack);
    untrack(() => {
      set(defaultContent, () => {
        var _a;
        return shouldRenderVariants ? {
          ...get(content),
          testVariationId: (_a = get(content)) == null ? void 0 : _a.id
        } : handleABTestingSync({
          item: get(content),
          canTrack: getDefaultCanTrack(get(canTrack))
        });
      });
    });
  });
  var fragment = open_frag($$anchor, true, frag24);
  var node = child_frag(fragment);
  var node_2 = sibling(sibling(node));
  var node_7 = sibling(sibling(node_2));
  if_block(
    node,
    () => !get(__isNestedRender) && TARGET !== "reactNative",
    ($$anchor2) => {
      var fragment_1 = open_frag($$anchor2, true, frag_111);
      var node_1 = child_frag(fragment_1);
      validate_component(Inlined_script)(node_1, {
        get scriptStr() {
          return getScriptString();
        }
      });
      close_frag($$anchor2, fragment_1);
    },
    null
  );
  if_block(
    node_2,
    () => shouldRenderVariants,
    ($$anchor2) => {
      var fragment_2 = open_frag($$anchor2, true, frag_27);
      var node_3 = child_frag(fragment_2);
      var node_4 = sibling(sibling(node_3));
      var node_5 = sibling(sibling(node_4));
      validate_each_keys(() => getVariants(get(content)), (variant) => {
        return unwrap(variant).testVariationId;
      });
      validate_component(Inlined_styles)(node_3, {
        get id() {
          var _a;
          return `variants-styles-${(_a = get(content)) == null ? void 0 : _a.id}`;
        },
        get styles() {
          return get(hideVariantsStyleString)();
        }
      });
      validate_component(Inlined_script)(node_4, {
        get scriptStr() {
          return get(variantScriptStr)();
        }
      });
      each_keyed(
        node_5,
        () => getVariants(get(content)),
        5,
        (variant) => {
          return unwrap(variant).testVariationId;
        },
        ($$anchor3, variant, $$index) => {
          var fragment_3 = open_frag($$anchor3, true, each_block5);
          var node_6 = child_frag(fragment_3);
          validate_component(Content)(node_6, {
            get content() {
              return unwrap(variant);
            },
            showContent: false,
            classNameProp: void 0,
            get model() {
              return get(model);
            },
            get data() {
              return get(data);
            },
            get context() {
              return get(context);
            },
            get apiKey() {
              return apiKey();
            },
            get apiVersion() {
              return get(apiVersion);
            },
            get customComponents() {
              return get(customComponents);
            },
            get canTrack() {
              return get(canTrack);
            },
            get locale() {
              return get(locale);
            },
            get includeRefs() {
              return get(includeRefs);
            },
            get enrich() {
              return get(enrich);
            },
            isSsrAbTest: shouldRenderVariants
          });
          close_frag($$anchor3, fragment_3);
        },
        null
      );
      close_frag($$anchor2, fragment_2);
    },
    null
  );
  validate_component(Content)(node_7, spread_props(() => [
    {},
    {
      get content() {
        return get(defaultContent)();
      },
      get classNameProp() {
        var _a;
        return `variant-${(_a = get(content)) == null ? void 0 : _a.id}`;
      },
      showContent: true,
      get model() {
        return get(model);
      },
      get data() {
        return get(data);
      },
      get context() {
        return get(context);
      },
      get apiKey() {
        return apiKey();
      },
      get apiVersion() {
        return get(apiVersion);
      },
      get customComponents() {
        return get(customComponents);
      },
      get canTrack() {
        return get(canTrack);
      },
      get locale() {
        return get(locale);
      },
      get includeRefs() {
        return get(includeRefs);
      },
      get enrich() {
        return get(enrich);
      },
      isSsrAbTest: shouldRenderVariants
    }
  ]));
  close_frag($$anchor, fragment);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/symbol/symbol.helpers.js
var fetchSymbolContent = async ({ builderContextValue, symbol }) => {
  if ((symbol == null ? void 0 : symbol.model) && // This is a hack, we should not need to check for this, but it is needed for Svelte.
  (builderContextValue == null ? void 0 : builderContextValue.apiKey)) {
    return fetchOneEntry({
      model: symbol.model,
      apiKey: builderContextValue.apiKey,
      apiVersion: builderContextValue.apiVersion,
      ...(symbol == null ? void 0 : symbol.entry) && {
        query: {
          id: symbol.entry
        }
      }
    }).catch((err) => {
      logger.error("Could not fetch symbol content: ", err);
      return void 0;
    });
  }
  return void 0;
};

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/blocks/symbol/symbol.svelte
var frag25 = template(`<div><!></div>`);
function Symbol2($$anchor, $$props) {
  var _a;
  if (new.target === Symbol2)
    throw new Error("Instantiating a component with `new` is no longer valid in Svelte 5. See https://svelte-5-preview.vercel.app/docs/breaking-changes#components-are-no-longer-classes for more information");
  push($$props, false);
  const $$subscriptions = {};
  unsubscribe_on_destroy($$subscriptions);
  const $builderContext = () => (validate_store(builderContext(), "builderContext"), store_get(builderContext(), "$builderContext", $$subscriptions));
  const className = source();
  let js = prop($$props, "js");
  let attributes = prop_source($$props, "attributes", void 0, false);
  let symbol = prop_source($$props, "symbol", void 0, false);
  let dynamic = prop_source($$props, "dynamic", void 0, false);
  let builderContext = prop($$props, "builderContext");
  let builderComponents = prop($$props, "builderComponents");
  function setContent() {
    if (get(contentToUse))
      return;
    fetchSymbolContent({
      symbol: get(symbol),
      builderContextValue: $builderContext()
    }).then((newContent) => {
      if (newContent) {
        set(contentToUse, newContent);
      }
    });
  }
  let contentToUse = source((_a = get(symbol)) == null ? void 0 : _a.content);
  onMount(() => {
    setContent();
  });
  function onUpdateFn_0(..._args) {
    setContent();
  }
  pre_effect(() => {
    get(attributes), get(symbol), get(dynamic);
    untrack(() => {
      set(className, () => {
        var _a2, _b;
        return [
          ...[get(attributes).class],
          "builder-symbol",
          ((_a2 = get(symbol)) == null ? void 0 : _a2.inline) ? "builder-inline-symbol" : void 0,
          ((_b = get(symbol)) == null ? void 0 : _b.dynamic) || get(dynamic) ? "builder-dynamic-symbol" : void 0
        ].filter(Boolean).join(" ");
      });
    });
  });
  pre_effect(() => {
    get(symbol);
    untrack(() => {
      onUpdateFn_0(...[get(symbol)]);
    });
  });
  var div = open($$anchor, true, frag25);
  let spread_attributes2;
  var node = child(div);
  render_effect(() => {
    spread_attributes2 = spread_attributes(
      div,
      spread_attributes2,
      [
        filterAttrs(get(attributes), "on:", false),
        {},
        { class: get(className)() }
      ],
      ""
    );
  });
  action(div, ($$node, $$props2) => setAttrs($$node, $$props2), () => filterAttrs(get(attributes), "on:", true));
  validate_component(Content_variants)(node, {
    __isNestedRender: true,
    get apiVersion() {
      return $builderContext().apiVersion;
    },
    get apiKey() {
      return $builderContext().apiKey;
    },
    get context() {
      return $builderContext().context;
    },
    get customComponents() {
      return Object.values(builderComponents());
    },
    get data() {
      var _a2, _b, _c;
      return {
        ...(_a2 = get(symbol)) == null ? void 0 : _a2.data,
        ...$builderContext().localState,
        ...(_c = (_b = get(contentToUse)) == null ? void 0 : _b.data) == null ? void 0 : _c.state
      };
    },
    get model() {
      var _a2;
      return (_a2 = get(symbol)) == null ? void 0 : _a2.model;
    },
    get content() {
      return get(contentToUse);
    }
  });
  close($$anchor, div);
  pop();
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/index-helpers/blocks-exports.js
var RenderBlocks = Blocks;
var RenderContent = Content_variants;

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/set-editor-settings.js
var settings = {};
function setEditorSettings(newSettings) {
  if (isBrowser()) {
    Object.assign(settings, newSettings);
    const message = {
      type: "builder.settingsChange",
      data: settings
    };
    parent.postMessage(message, "*");
  }
}

// node_modules/.pnpm/@builder.io+sdk-svelte@0.7.0_svelte@5.0.0-next.7/node_modules/@builder.io/sdk-svelte/lib/browser/functions/fetch-builder-props.js
var fetchBuilderProps = async (_args) => {
  var _a, _b, _c;
  const urlPath = _args.path || ((_a = _args.url) == null ? void 0 : _a.pathname) || ((_b = _args.userAttributes) == null ? void 0 : _b.urlPath);
  const getContentArgs = {
    ..._args,
    apiKey: _args.apiKey,
    model: _args.model || "page",
    userAttributes: {
      ..._args.userAttributes,
      ...urlPath ? {
        urlPath
      } : {}
    },
    options: getBuilderSearchParams(_args.searchParams || ((_c = _args.url) == null ? void 0 : _c.searchParams) || _args.options)
  };
  return {
    apiKey: getContentArgs.apiKey,
    model: getContentArgs.model,
    content: await fetchOneEntry(getContentArgs)
  };
};
export {
  Blocks,
  Button,
  Columns,
  Content_variants as Content,
  Fragment,
  Image,
  RenderBlocks,
  RenderContent,
  Section,
  Symbol2 as Symbol,
  Text,
  Video,
  _processContentResult,
  createRegisterComponentMessage,
  fetchBuilderProps,
  fetchEntries,
  fetchOneEntry,
  getAllContent,
  getBuilderSearchParams,
  getContent,
  isEditing,
  isPreviewing,
  register,
  setEditorSettings,
  track
};
//# sourceMappingURL=@builder__io_sdk-svelte.js.map
